
STM32F103C8_LedBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000207c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002188  08002188  00012188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002258  08002258  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002258  08002258  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002258  08002258  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800225c  0800225c  0001225c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  080022d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080022d0  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005099  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001290  00000000  00000000  00025132  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004a8  00000000  00000000  000263c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000400  00000000  00000000  00026870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017456  00000000  00000000  00026c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004a45  00000000  00000000  0003e0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000807f9  00000000  00000000  00042b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c3304  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000177c  00000000  00000000  000c3380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002170 	.word	0x08002170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002170 	.word	0x08002170

0800014c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800015c:	f003 0301 	and.w	r3, r3, #1
 8000160:	2b00      	cmp	r3, #0
 8000162:	d013      	beq.n	800018c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800016c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000170:	2b00      	cmp	r3, #0
 8000172:	d00b      	beq.n	800018c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000174:	e000      	b.n	8000178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	2b00      	cmp	r3, #0
 8000180:	d0f9      	beq.n	8000176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000186:	687a      	ldr	r2, [r7, #4]
 8000188:	b2d2      	uxtb	r2, r2
 800018a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800018c:	687b      	ldr	r3, [r7, #4]
}
 800018e:	4618      	mov	r0, r3
 8000190:	370c      	adds	r7, #12
 8000192:	46bd      	mov	sp, r7
 8000194:	bc80      	pop	{r7}
 8000196:	4770      	bx	lr

08000198 <_write>:

void SystemClock_Config(void);
static void MX_GPIO_Init            (void);

int _write(int file, char *ptr, int len)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80001a8:	2300      	movs	r3, #0
 80001aa:	617b      	str	r3, [r7, #20]
 80001ac:	e009      	b.n	80001c2 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	1c5a      	adds	r2, r3, #1
 80001b2:	60ba      	str	r2, [r7, #8]
 80001b4:	781b      	ldrb	r3, [r3, #0]
 80001b6:	4618      	mov	r0, r3
 80001b8:	f7ff ffc8 	bl	800014c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80001bc:	697b      	ldr	r3, [r7, #20]
 80001be:	3301      	adds	r3, #1
 80001c0:	617b      	str	r3, [r7, #20]
 80001c2:	697a      	ldr	r2, [r7, #20]
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	dbf1      	blt.n	80001ae <_write+0x16>
  return len;
 80001ca:	687b      	ldr	r3, [r7, #4]
}
 80001cc:	4618      	mov	r0, r3
 80001ce:	3718      	adds	r7, #24
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}

080001d4 <main>:

int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  HAL_Init();
 80001d8:	f000 f9cc 	bl	8000574 <HAL_Init>
  SystemClock_Config();
 80001dc:	f000 f81c 	bl	8000218 <SystemClock_Config>
  MX_GPIO_Init();
 80001e0:	f000 f85c 	bl	800029c <MX_GPIO_Init>
  while (1)
  {
	  printf("Hello World = %d", count);
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <main+0x38>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4619      	mov	r1, r3
 80001ea:	4809      	ldr	r0, [pc, #36]	; (8000210 <main+0x3c>)
 80001ec:	f001 f8d2 	bl	8001394 <iprintf>
	  HAL_Delay(100);
 80001f0:	2064      	movs	r0, #100	; 0x64
 80001f2:	f000 fa21 	bl	8000638 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x40>)
 80001fc:	f000 fc94 	bl	8000b28 <HAL_GPIO_TogglePin>

	  count ++;
 8000200:	4b02      	ldr	r3, [pc, #8]	; (800020c <main+0x38>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	3301      	adds	r3, #1
 8000206:	4a01      	ldr	r2, [pc, #4]	; (800020c <main+0x38>)
 8000208:	6013      	str	r3, [r2, #0]
	  printf("Hello World = %d", count);
 800020a:	e7eb      	b.n	80001e4 <main+0x10>
 800020c:	20000098 	.word	0x20000098
 8000210:	08002188 	.word	0x08002188
 8000214:	40011000 	.word	0x40011000

08000218 <SystemClock_Config>:
  /* USER CODE END 3 */
}


void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b090      	sub	sp, #64	; 0x40
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0318 	add.w	r3, r7, #24
 8000222:	2228      	movs	r2, #40	; 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f001 f8ac 	bl	8001384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800023a:	2302      	movs	r3, #2
 800023c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800023e:	2301      	movs	r3, #1
 8000240:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000242:	2310      	movs	r3, #16
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000246:	2302      	movs	r3, #2
 8000248:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800024a:	2300      	movs	r3, #0
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800024e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000252:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000254:	f107 0318 	add.w	r3, r7, #24
 8000258:	4618      	mov	r0, r3
 800025a:	f000 fc7f 	bl	8000b5c <HAL_RCC_OscConfig>
 800025e:	4603      	mov	r3, r0
 8000260:	2b00      	cmp	r3, #0
 8000262:	d001      	beq.n	8000268 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000264:	f000 f874 	bl	8000350 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000268:	230f      	movs	r3, #15
 800026a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800026c:	2302      	movs	r3, #2
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000278:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	2102      	movs	r1, #2
 8000282:	4618      	mov	r0, r3
 8000284:	f000 feea 	bl	800105c <HAL_RCC_ClockConfig>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800028e:	f000 f85f 	bl	8000350 <Error_Handler>
  }
}
 8000292:	bf00      	nop
 8000294:	3740      	adds	r7, #64	; 0x40
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a23      	ldr	r2, [pc, #140]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002b6:	f043 0310 	orr.w	r3, r3, #16
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b21      	ldr	r3, [pc, #132]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0310 	and.w	r3, r3, #16
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002c8:	4b1e      	ldr	r3, [pc, #120]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a1d      	ldr	r2, [pc, #116]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b1b      	ldr	r3, [pc, #108]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0304 	and.w	r3, r3, #4
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002e0:	4b18      	ldr	r3, [pc, #96]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a17      	ldr	r2, [pc, #92]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b15      	ldr	r3, [pc, #84]	; (8000344 <MX_GPIO_Init+0xa8>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0308 	and.w	r3, r3, #8
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002fe:	4812      	ldr	r0, [pc, #72]	; (8000348 <MX_GPIO_Init+0xac>)
 8000300:	f000 fbfa 	bl	8000af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000304:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000308:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030a:	2301      	movs	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	2300      	movs	r3, #0
 8000310:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000312:	2302      	movs	r3, #2
 8000314:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	4619      	mov	r1, r3
 800031c:	480a      	ldr	r0, [pc, #40]	; (8000348 <MX_GPIO_Init+0xac>)
 800031e:	f000 fa91 	bl	8000844 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000322:	2340      	movs	r3, #64	; 0x40
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032a:	2300      	movs	r3, #0
 800032c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_GPIO_Init+0xb0>)
 8000336:	f000 fa85 	bl	8000844 <HAL_GPIO_Init>

}
 800033a:	bf00      	nop
 800033c:	3720      	adds	r7, #32
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000
 8000348:	40011000 	.word	0x40011000
 800034c:	40010c00 	.word	0x40010c00

08000350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

/* USER CODE END Error_Handler_Debug */
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	bc80      	pop	{r7}
 800035a:	4770      	bx	lr

0800035c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <HAL_MspInit+0x5c>)
 8000364:	699b      	ldr	r3, [r3, #24]
 8000366:	4a14      	ldr	r2, [pc, #80]	; (80003b8 <HAL_MspInit+0x5c>)
 8000368:	f043 0301 	orr.w	r3, r3, #1
 800036c:	6193      	str	r3, [r2, #24]
 800036e:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	f003 0301 	and.w	r3, r3, #1
 8000376:	60bb      	str	r3, [r7, #8]
 8000378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <HAL_MspInit+0x5c>)
 800037c:	69db      	ldr	r3, [r3, #28]
 800037e:	4a0e      	ldr	r2, [pc, #56]	; (80003b8 <HAL_MspInit+0x5c>)
 8000380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000384:	61d3      	str	r3, [r2, #28]
 8000386:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000392:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <HAL_MspInit+0x60>)
 8000394:	685b      	ldr	r3, [r3, #4]
 8000396:	60fb      	str	r3, [r7, #12]
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003a6:	60fb      	str	r3, [r7, #12]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <HAL_MspInit+0x60>)
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3714      	adds	r7, #20
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bc80      	pop	{r7}
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010000 	.word	0x40010000

080003c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <HardFault_Handler+0x4>

080003d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003d6:	e7fe      	b.n	80003d6 <MemManage_Handler+0x4>

080003d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <BusFault_Handler+0x4>

080003de <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <UsageFault_Handler+0x4>

080003e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003e8:	bf00      	nop
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bc80      	pop	{r7}
 80003ee:	4770      	bx	lr

080003f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800040c:	f000 f8f8 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b086      	sub	sp, #24
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
 8000424:	e00a      	b.n	800043c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000426:	f3af 8000 	nop.w
 800042a:	4601      	mov	r1, r0
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	1c5a      	adds	r2, r3, #1
 8000430:	60ba      	str	r2, [r7, #8]
 8000432:	b2ca      	uxtb	r2, r1
 8000434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	429a      	cmp	r2, r3
 8000442:	dbf0      	blt.n	8000426 <_read+0x12>
	}

return len;
 8000444:	687b      	ldr	r3, [r7, #4]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <_close>:
	}
	return len;
}

int _close(int file)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
	return -1;
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr

08000464 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000474:	605a      	str	r2, [r3, #4]
	return 0;
 8000476:	2300      	movs	r3, #0
}
 8000478:	4618      	mov	r0, r3
 800047a:	370c      	adds	r7, #12
 800047c:	46bd      	mov	sp, r7
 800047e:	bc80      	pop	{r7}
 8000480:	4770      	bx	lr

08000482 <_isatty>:

int _isatty(int file)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
	return 1;
 800048a:	2301      	movs	r3, #1
}
 800048c:	4618      	mov	r0, r3
 800048e:	370c      	adds	r7, #12
 8000490:	46bd      	mov	sp, r7
 8000492:	bc80      	pop	{r7}
 8000494:	4770      	bx	lr

08000496 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000496:	b480      	push	{r7}
 8000498:	b085      	sub	sp, #20
 800049a:	af00      	add	r7, sp, #0
 800049c:	60f8      	str	r0, [r7, #12]
 800049e:	60b9      	str	r1, [r7, #8]
 80004a0:	607a      	str	r2, [r7, #4]
	return 0;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3714      	adds	r7, #20
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bc80      	pop	{r7}
 80004ac:	4770      	bx	lr
	...

080004b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004b8:	4a14      	ldr	r2, [pc, #80]	; (800050c <_sbrk+0x5c>)
 80004ba:	4b15      	ldr	r3, [pc, #84]	; (8000510 <_sbrk+0x60>)
 80004bc:	1ad3      	subs	r3, r2, r3
 80004be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <_sbrk+0x64>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d102      	bne.n	80004d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <_sbrk+0x64>)
 80004ce:	4a12      	ldr	r2, [pc, #72]	; (8000518 <_sbrk+0x68>)
 80004d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004d2:	4b10      	ldr	r3, [pc, #64]	; (8000514 <_sbrk+0x64>)
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4413      	add	r3, r2
 80004da:	693a      	ldr	r2, [r7, #16]
 80004dc:	429a      	cmp	r2, r3
 80004de:	d207      	bcs.n	80004f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e0:	f000 ff26 	bl	8001330 <__errno>
 80004e4:	4602      	mov	r2, r0
 80004e6:	230c      	movs	r3, #12
 80004e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295
 80004ee:	e009      	b.n	8000504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <_sbrk+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004f6:	4b07      	ldr	r3, [pc, #28]	; (8000514 <_sbrk+0x64>)
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4413      	add	r3, r2
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <_sbrk+0x64>)
 8000500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000502:	68fb      	ldr	r3, [r7, #12]
}
 8000504:	4618      	mov	r0, r3
 8000506:	3718      	adds	r7, #24
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20005000 	.word	0x20005000
 8000510:	00000400 	.word	0x00000400
 8000514:	2000008c 	.word	0x2000008c
 8000518:	200000a8 	.word	0x200000a8

0800051c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000528:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800052a:	e003      	b.n	8000534 <LoopCopyDataInit>

0800052c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800052e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000530:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000532:	3104      	adds	r1, #4

08000534 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000534:	480a      	ldr	r0, [pc, #40]	; (8000560 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000538:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800053a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800053c:	d3f6      	bcc.n	800052c <CopyDataInit>
  ldr r2, =_sbss
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000540:	e002      	b.n	8000548 <LoopFillZerobss>

08000542 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000542:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000544:	f842 3b04 	str.w	r3, [r2], #4

08000548 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800054a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800054c:	d3f9      	bcc.n	8000542 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800054e:	f7ff ffe5 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000552:	f000 fef3 	bl	800133c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fe3d 	bl	80001d4 <main>
  bx lr
 800055a:	4770      	bx	lr
  ldr r3, =_sidata
 800055c:	08002260 	.word	0x08002260
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000564:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000568:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 800056c:	200000a4 	.word	0x200000a4

08000570 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000570:	e7fe      	b.n	8000570 <ADC1_2_IRQHandler>
	...

08000574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_Init+0x28>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a07      	ldr	r2, [pc, #28]	; (800059c <HAL_Init+0x28>)
 800057e:	f043 0310 	orr.w	r3, r3, #16
 8000582:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000584:	2003      	movs	r0, #3
 8000586:	f000 f929 	bl	80007dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800058a:	2000      	movs	r0, #0
 800058c:	f000 f808 	bl	80005a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000590:	f7ff fee4 	bl	800035c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000594:	2300      	movs	r3, #0
}
 8000596:	4618      	mov	r0, r3
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40022000 	.word	0x40022000

080005a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_InitTick+0x54>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_InitTick+0x58>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 f933 	bl	800082a <HAL_SYSTICK_Config>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e00e      	b.n	80005ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	2b0f      	cmp	r3, #15
 80005d2:	d80a      	bhi.n	80005ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d4:	2200      	movs	r2, #0
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	f04f 30ff 	mov.w	r0, #4294967295
 80005dc:	f000 f909 	bl	80007f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4a06      	ldr	r2, [pc, #24]	; (80005fc <HAL_InitTick+0x5c>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4413      	add	r3, r2
 8000610:	4a03      	ldr	r2, [pc, #12]	; (8000620 <HAL_IncTick+0x20>)
 8000612:	6013      	str	r3, [r2, #0]
}
 8000614:	bf00      	nop
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr
 800061c:	20000008 	.word	0x20000008
 8000620:	2000009c 	.word	0x2000009c

08000624 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	4618      	mov	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	2000009c 	.word	0x2000009c

08000638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000640:	f7ff fff0 	bl	8000624 <HAL_GetTick>
 8000644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000650:	d005      	beq.n	800065e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <HAL_Delay+0x40>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	461a      	mov	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	4413      	add	r3, r2
 800065c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800065e:	bf00      	nop
 8000660:	f7ff ffe0 	bl	8000624 <HAL_GetTick>
 8000664:	4602      	mov	r2, r0
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	1ad3      	subs	r3, r2, r3
 800066a:	68fa      	ldr	r2, [r7, #12]
 800066c:	429a      	cmp	r2, r3
 800066e:	d8f7      	bhi.n	8000660 <HAL_Delay+0x28>
  {
  }
}
 8000670:	bf00      	nop
 8000672:	3710      	adds	r7, #16
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000008 	.word	0x20000008

0800067c <__NVIC_SetPriorityGrouping>:
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800068c:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000692:	68ba      	ldr	r2, [r7, #8]
 8000694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000698:	4013      	ands	r3, r2
 800069a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ae:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <__NVIC_SetPriorityGrouping+0x44>)
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	60d3      	str	r3, [r2, #12]
}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00

080006c4 <__NVIC_GetPriorityGrouping>:
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <__NVIC_GetPriorityGrouping+0x18>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	0a1b      	lsrs	r3, r3, #8
 80006ce:	f003 0307 	and.w	r3, r3, #7
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_SetPriority>:
{
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	6039      	str	r1, [r7, #0]
 80006ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	db0a      	blt.n	800070a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	490c      	ldr	r1, [pc, #48]	; (800072c <__NVIC_SetPriority+0x4c>)
 80006fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fe:	0112      	lsls	r2, r2, #4
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	440b      	add	r3, r1
 8000704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000708:	e00a      	b.n	8000720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	b2da      	uxtb	r2, r3
 800070e:	4908      	ldr	r1, [pc, #32]	; (8000730 <__NVIC_SetPriority+0x50>)
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	f003 030f 	and.w	r3, r3, #15
 8000716:	3b04      	subs	r3, #4
 8000718:	0112      	lsls	r2, r2, #4
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	440b      	add	r3, r1
 800071e:	761a      	strb	r2, [r3, #24]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000e100 	.word	0xe000e100
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <NVIC_EncodePriority>:
{
 8000734:	b480      	push	{r7}
 8000736:	b089      	sub	sp, #36	; 0x24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	f1c3 0307 	rsb	r3, r3, #7
 800074e:	2b04      	cmp	r3, #4
 8000750:	bf28      	it	cs
 8000752:	2304      	movcs	r3, #4
 8000754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	3304      	adds	r3, #4
 800075a:	2b06      	cmp	r3, #6
 800075c:	d902      	bls.n	8000764 <NVIC_EncodePriority+0x30>
 800075e:	69fb      	ldr	r3, [r7, #28]
 8000760:	3b03      	subs	r3, #3
 8000762:	e000      	b.n	8000766 <NVIC_EncodePriority+0x32>
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000768:	f04f 32ff 	mov.w	r2, #4294967295
 800076c:	69bb      	ldr	r3, [r7, #24]
 800076e:	fa02 f303 	lsl.w	r3, r2, r3
 8000772:	43da      	mvns	r2, r3
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	401a      	ands	r2, r3
 8000778:	697b      	ldr	r3, [r7, #20]
 800077a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800077c:	f04f 31ff 	mov.w	r1, #4294967295
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	43d9      	mvns	r1, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800078c:	4313      	orrs	r3, r2
}
 800078e:	4618      	mov	r0, r3
 8000790:	3724      	adds	r7, #36	; 0x24
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr

08000798 <SysTick_Config>:
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a8:	d301      	bcc.n	80007ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80007aa:	2301      	movs	r3, #1
 80007ac:	e00f      	b.n	80007ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ae:	4a0a      	ldr	r2, [pc, #40]	; (80007d8 <SysTick_Config+0x40>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007b6:	210f      	movs	r1, #15
 80007b8:	f04f 30ff 	mov.w	r0, #4294967295
 80007bc:	f7ff ff90 	bl	80006e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <SysTick_Config+0x40>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007c6:	4b04      	ldr	r3, [pc, #16]	; (80007d8 <SysTick_Config+0x40>)
 80007c8:	2207      	movs	r2, #7
 80007ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	e000e010 	.word	0xe000e010

080007dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f7ff ff49 	bl	800067c <__NVIC_SetPriorityGrouping>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4603      	mov	r3, r0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000804:	f7ff ff5e 	bl	80006c4 <__NVIC_GetPriorityGrouping>
 8000808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	68b9      	ldr	r1, [r7, #8]
 800080e:	6978      	ldr	r0, [r7, #20]
 8000810:	f7ff ff90 	bl	8000734 <NVIC_EncodePriority>
 8000814:	4602      	mov	r2, r0
 8000816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff5f 	bl	80006e0 <__NVIC_SetPriority>
}
 8000822:	bf00      	nop
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f7ff ffb0 	bl	8000798 <SysTick_Config>
 8000838:	4603      	mov	r3, r0
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <HAL_GPIO_Init>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000844:	b480      	push	{r7}
 8000846:	b08b      	sub	sp, #44	; 0x2c
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000856:	e127      	b.n	8000aa8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000858:	2201      	movs	r2, #1
 800085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	69fa      	ldr	r2, [r7, #28]
 8000868:	4013      	ands	r3, r2
 800086a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800086c:	69ba      	ldr	r2, [r7, #24]
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	429a      	cmp	r2, r3
 8000872:	f040 8116 	bne.w	8000aa2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	2b12      	cmp	r3, #18
 800087c:	d034      	beq.n	80008e8 <HAL_GPIO_Init+0xa4>
 800087e:	2b12      	cmp	r3, #18
 8000880:	d80d      	bhi.n	800089e <HAL_GPIO_Init+0x5a>
 8000882:	2b02      	cmp	r3, #2
 8000884:	d02b      	beq.n	80008de <HAL_GPIO_Init+0x9a>
 8000886:	2b02      	cmp	r3, #2
 8000888:	d804      	bhi.n	8000894 <HAL_GPIO_Init+0x50>
 800088a:	2b00      	cmp	r3, #0
 800088c:	d031      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
 800088e:	2b01      	cmp	r3, #1
 8000890:	d01c      	beq.n	80008cc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000892:	e048      	b.n	8000926 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000894:	2b03      	cmp	r3, #3
 8000896:	d043      	beq.n	8000920 <HAL_GPIO_Init+0xdc>
 8000898:	2b11      	cmp	r3, #17
 800089a:	d01b      	beq.n	80008d4 <HAL_GPIO_Init+0x90>
          break;
 800089c:	e043      	b.n	8000926 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800089e:	4a89      	ldr	r2, [pc, #548]	; (8000ac4 <HAL_GPIO_Init+0x280>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d026      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
 80008a4:	4a87      	ldr	r2, [pc, #540]	; (8000ac4 <HAL_GPIO_Init+0x280>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d806      	bhi.n	80008b8 <HAL_GPIO_Init+0x74>
 80008aa:	4a87      	ldr	r2, [pc, #540]	; (8000ac8 <HAL_GPIO_Init+0x284>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d020      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
 80008b0:	4a86      	ldr	r2, [pc, #536]	; (8000acc <HAL_GPIO_Init+0x288>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d01d      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
          break;
 80008b6:	e036      	b.n	8000926 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80008b8:	4a85      	ldr	r2, [pc, #532]	; (8000ad0 <HAL_GPIO_Init+0x28c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d019      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
 80008be:	4a85      	ldr	r2, [pc, #532]	; (8000ad4 <HAL_GPIO_Init+0x290>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d016      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
 80008c4:	4a84      	ldr	r2, [pc, #528]	; (8000ad8 <HAL_GPIO_Init+0x294>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d013      	beq.n	80008f2 <HAL_GPIO_Init+0xae>
          break;
 80008ca:	e02c      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	623b      	str	r3, [r7, #32]
          break;
 80008d2:	e028      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	3304      	adds	r3, #4
 80008da:	623b      	str	r3, [r7, #32]
          break;
 80008dc:	e023      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	3308      	adds	r3, #8
 80008e4:	623b      	str	r3, [r7, #32]
          break;
 80008e6:	e01e      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	330c      	adds	r3, #12
 80008ee:	623b      	str	r3, [r7, #32]
          break;
 80008f0:	e019      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d102      	bne.n	8000900 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008fa:	2304      	movs	r3, #4
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e012      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d105      	bne.n	8000914 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000908:	2308      	movs	r3, #8
 800090a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	69fa      	ldr	r2, [r7, #28]
 8000910:	611a      	str	r2, [r3, #16]
          break;
 8000912:	e008      	b.n	8000926 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000914:	2308      	movs	r3, #8
 8000916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	615a      	str	r2, [r3, #20]
          break;
 800091e:	e002      	b.n	8000926 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000920:	2300      	movs	r3, #0
 8000922:	623b      	str	r3, [r7, #32]
          break;
 8000924:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	2bff      	cmp	r3, #255	; 0xff
 800092a:	d801      	bhi.n	8000930 <HAL_GPIO_Init+0xec>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	e001      	b.n	8000934 <HAL_GPIO_Init+0xf0>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3304      	adds	r3, #4
 8000934:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	2bff      	cmp	r3, #255	; 0xff
 800093a:	d802      	bhi.n	8000942 <HAL_GPIO_Init+0xfe>
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093e:	009b      	lsls	r3, r3, #2
 8000940:	e002      	b.n	8000948 <HAL_GPIO_Init+0x104>
 8000942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000944:	3b08      	subs	r3, #8
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	210f      	movs	r1, #15
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	fa01 f303 	lsl.w	r3, r1, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	401a      	ands	r2, r3
 800095a:	6a39      	ldr	r1, [r7, #32]
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	fa01 f303 	lsl.w	r3, r1, r3
 8000962:	431a      	orrs	r2, r3
 8000964:	697b      	ldr	r3, [r7, #20]
 8000966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	2b00      	cmp	r3, #0
 8000972:	f000 8096 	beq.w	8000aa2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000976:	4b59      	ldr	r3, [pc, #356]	; (8000adc <HAL_GPIO_Init+0x298>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	4a58      	ldr	r2, [pc, #352]	; (8000adc <HAL_GPIO_Init+0x298>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6193      	str	r3, [r2, #24]
 8000982:	4b56      	ldr	r3, [pc, #344]	; (8000adc <HAL_GPIO_Init+0x298>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800098e:	4a54      	ldr	r2, [pc, #336]	; (8000ae0 <HAL_GPIO_Init+0x29c>)
 8000990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	3302      	adds	r3, #2
 8000996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800099a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800099c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099e:	f003 0303 	and.w	r3, r3, #3
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	220f      	movs	r2, #15
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	43db      	mvns	r3, r3
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	4013      	ands	r3, r2
 80009b0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_GPIO_Init+0x2a0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d013      	beq.n	80009e2 <HAL_GPIO_Init+0x19e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <HAL_GPIO_Init+0x2a4>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d00d      	beq.n	80009de <HAL_GPIO_Init+0x19a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a49      	ldr	r2, [pc, #292]	; (8000aec <HAL_GPIO_Init+0x2a8>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d007      	beq.n	80009da <HAL_GPIO_Init+0x196>
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4a48      	ldr	r2, [pc, #288]	; (8000af0 <HAL_GPIO_Init+0x2ac>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d101      	bne.n	80009d6 <HAL_GPIO_Init+0x192>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x1a0>
 80009d6:	2304      	movs	r3, #4
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x1a0>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x1a0>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x1a0>
 80009e2:	2300      	movs	r3, #0
 80009e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80009f4:	493a      	ldr	r1, [pc, #232]	; (8000ae0 <HAL_GPIO_Init+0x29c>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d006      	beq.n	8000a1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a0e:	4b39      	ldr	r3, [pc, #228]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	4938      	ldr	r1, [pc, #224]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a14:	69bb      	ldr	r3, [r7, #24]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	600b      	str	r3, [r1, #0]
 8000a1a:	e006      	b.n	8000a2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a1c:	4b35      	ldr	r3, [pc, #212]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	69bb      	ldr	r3, [r7, #24]
 8000a22:	43db      	mvns	r3, r3
 8000a24:	4933      	ldr	r1, [pc, #204]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a26:	4013      	ands	r3, r2
 8000a28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	685b      	ldr	r3, [r3, #4]
 8000a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d006      	beq.n	8000a44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a38:	685a      	ldr	r2, [r3, #4]
 8000a3a:	492e      	ldr	r1, [pc, #184]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a3c:	69bb      	ldr	r3, [r7, #24]
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	604b      	str	r3, [r1, #4]
 8000a42:	e006      	b.n	8000a52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a44:	4b2b      	ldr	r3, [pc, #172]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a46:	685a      	ldr	r2, [r3, #4]
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	4929      	ldr	r1, [pc, #164]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a4e:	4013      	ands	r3, r2
 8000a50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a5e:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	4924      	ldr	r1, [pc, #144]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	608b      	str	r3, [r1, #8]
 8000a6a:	e006      	b.n	8000a7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a6c:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	43db      	mvns	r3, r3
 8000a74:	491f      	ldr	r1, [pc, #124]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a76:	4013      	ands	r3, r2
 8000a78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d006      	beq.n	8000a94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a86:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a88:	68da      	ldr	r2, [r3, #12]
 8000a8a:	491a      	ldr	r1, [pc, #104]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	60cb      	str	r3, [r1, #12]
 8000a92:	e006      	b.n	8000aa2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a94:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	4915      	ldr	r1, [pc, #84]	; (8000af4 <HAL_GPIO_Init+0x2b0>)
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aae:	fa22 f303 	lsr.w	r3, r2, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f47f aed0 	bne.w	8000858 <HAL_GPIO_Init+0x14>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	372c      	adds	r7, #44	; 0x2c
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	10210000 	.word	0x10210000
 8000ac8:	10110000 	.word	0x10110000
 8000acc:	10120000 	.word	0x10120000
 8000ad0:	10310000 	.word	0x10310000
 8000ad4:	10320000 	.word	0x10320000
 8000ad8:	10220000 	.word	0x10220000
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40010000 	.word	0x40010000
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	40010c00 	.word	0x40010c00
 8000aec:	40011000 	.word	0x40011000
 8000af0:	40011400 	.word	0x40011400
 8000af4:	40010400 	.word	0x40010400

08000af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	807b      	strh	r3, [r7, #2]
 8000b04:	4613      	mov	r3, r2
 8000b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b08:	787b      	ldrb	r3, [r7, #1]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b0e:	887a      	ldrh	r2, [r7, #2]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b14:	e003      	b.n	8000b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b16:	887b      	ldrh	r3, [r7, #2]
 8000b18:	041a      	lsls	r2, r3, #16
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	611a      	str	r2, [r3, #16]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	041a      	lsls	r2, r3, #16
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	43d9      	mvns	r1, r3
 8000b46:	887b      	ldrh	r3, [r7, #2]
 8000b48:	400b      	ands	r3, r1
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	611a      	str	r2, [r3, #16]
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
	...

08000b5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d101      	bne.n	8000b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	e26c      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f000 8087 	beq.w	8000c8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b7c:	4b92      	ldr	r3, [pc, #584]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f003 030c 	and.w	r3, r3, #12
 8000b84:	2b04      	cmp	r3, #4
 8000b86:	d00c      	beq.n	8000ba2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b88:	4b8f      	ldr	r3, [pc, #572]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 030c 	and.w	r3, r3, #12
 8000b90:	2b08      	cmp	r3, #8
 8000b92:	d112      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
 8000b94:	4b8c      	ldr	r3, [pc, #560]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ba0:	d10b      	bne.n	8000bba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba2:	4b89      	ldr	r3, [pc, #548]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d06c      	beq.n	8000c88 <HAL_RCC_OscConfig+0x12c>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d168      	bne.n	8000c88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e246      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bc2:	d106      	bne.n	8000bd2 <HAL_RCC_OscConfig+0x76>
 8000bc4:	4b80      	ldr	r3, [pc, #512]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a7f      	ldr	r2, [pc, #508]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e02e      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_RCC_OscConfig+0x98>
 8000bda:	4b7b      	ldr	r3, [pc, #492]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a7a      	ldr	r2, [pc, #488]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	4b78      	ldr	r3, [pc, #480]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a77      	ldr	r2, [pc, #476]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e01d      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bfc:	d10c      	bne.n	8000c18 <HAL_RCC_OscConfig+0xbc>
 8000bfe:	4b72      	ldr	r3, [pc, #456]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a71      	ldr	r2, [pc, #452]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	4b6f      	ldr	r3, [pc, #444]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a6e      	ldr	r2, [pc, #440]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c14:	6013      	str	r3, [r2, #0]
 8000c16:	e00b      	b.n	8000c30 <HAL_RCC_OscConfig+0xd4>
 8000c18:	4b6b      	ldr	r3, [pc, #428]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a6a      	ldr	r2, [pc, #424]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c22:	6013      	str	r3, [r2, #0]
 8000c24:	4b68      	ldr	r3, [pc, #416]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a67      	ldr	r2, [pc, #412]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d013      	beq.n	8000c60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c38:	f7ff fcf4 	bl	8000624 <HAL_GetTick>
 8000c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c3e:	e008      	b.n	8000c52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c40:	f7ff fcf0 	bl	8000624 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	2b64      	cmp	r3, #100	; 0x64
 8000c4c:	d901      	bls.n	8000c52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e1fa      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c52:	4b5d      	ldr	r3, [pc, #372]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d0f0      	beq.n	8000c40 <HAL_RCC_OscConfig+0xe4>
 8000c5e:	e014      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fce0 	bl	8000624 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c68:	f7ff fcdc 	bl	8000624 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b64      	cmp	r3, #100	; 0x64
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e1e6      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c7a:	4b53      	ldr	r3, [pc, #332]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x10c>
 8000c86:	e000      	b.n	8000c8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d063      	beq.n	8000d5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c96:	4b4c      	ldr	r3, [pc, #304]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d00b      	beq.n	8000cba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ca2:	4b49      	ldr	r3, [pc, #292]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 030c 	and.w	r3, r3, #12
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d11c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
 8000cae:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d116      	bne.n	8000ce8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cba:	4b43      	ldr	r3, [pc, #268]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	691b      	ldr	r3, [r3, #16]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d001      	beq.n	8000cd2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e1ba      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd2:	4b3d      	ldr	r3, [pc, #244]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	695b      	ldr	r3, [r3, #20]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4939      	ldr	r1, [pc, #228]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ce6:	e03a      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	691b      	ldr	r3, [r3, #16]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d020      	beq.n	8000d32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cf0:	4b36      	ldr	r3, [pc, #216]	; (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fc95 	bl	8000624 <HAL_GetTick>
 8000cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfc:	e008      	b.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cfe:	f7ff fc91 	bl	8000624 <HAL_GetTick>
 8000d02:	4602      	mov	r2, r0
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d901      	bls.n	8000d10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	e19b      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d10:	4b2d      	ldr	r3, [pc, #180]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f003 0302 	and.w	r3, r3, #2
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d0f0      	beq.n	8000cfe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1c:	4b2a      	ldr	r3, [pc, #168]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	4927      	ldr	r1, [pc, #156]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e015      	b.n	8000d5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_RCC_OscConfig+0x270>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d38:	f7ff fc74 	bl	8000624 <HAL_GetTick>
 8000d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d3e:	e008      	b.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d40:	f7ff fc70 	bl	8000624 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	693b      	ldr	r3, [r7, #16]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b02      	cmp	r3, #2
 8000d4c:	d901      	bls.n	8000d52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	e17a      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d52:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d1f0      	bne.n	8000d40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d03a      	beq.n	8000de0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d019      	beq.n	8000da6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d72:	4b17      	ldr	r3, [pc, #92]	; (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d78:	f7ff fc54 	bl	8000624 <HAL_GetTick>
 8000d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d7e:	e008      	b.n	8000d92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d80:	f7ff fc50 	bl	8000624 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d901      	bls.n	8000d92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e15a      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d92:	4b0d      	ldr	r3, [pc, #52]	; (8000dc8 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0f0      	beq.n	8000d80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 faa8 	bl	80012f4 <RCC_Delay>
 8000da4:	e01c      	b.n	8000de0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000da6:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_RCC_OscConfig+0x274>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dac:	f7ff fc3a 	bl	8000624 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000db2:	e00f      	b.n	8000dd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000db4:	f7ff fc36 	bl	8000624 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d908      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e140      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
 8000dc6:	bf00      	nop
 8000dc8:	40021000 	.word	0x40021000
 8000dcc:	42420000 	.word	0x42420000
 8000dd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dd4:	4b9e      	ldr	r3, [pc, #632]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e9      	bne.n	8000db4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0304 	and.w	r3, r3, #4
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f000 80a6 	beq.w	8000f3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df2:	4b97      	ldr	r3, [pc, #604]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b94      	ldr	r3, [pc, #592]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e00:	69db      	ldr	r3, [r3, #28]
 8000e02:	4a93      	ldr	r2, [pc, #588]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e08:	61d3      	str	r3, [r2, #28]
 8000e0a:	4b91      	ldr	r3, [pc, #580]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e16:	2301      	movs	r3, #1
 8000e18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e1a:	4b8e      	ldr	r3, [pc, #568]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d118      	bne.n	8000e58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e26:	4b8b      	ldr	r3, [pc, #556]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a8a      	ldr	r2, [pc, #552]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e32:	f7ff fbf7 	bl	8000624 <HAL_GetTick>
 8000e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e38:	e008      	b.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e3a:	f7ff fbf3 	bl	8000624 <HAL_GetTick>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	2b64      	cmp	r3, #100	; 0x64
 8000e46:	d901      	bls.n	8000e4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	e0fd      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e4c:	4b81      	ldr	r3, [pc, #516]	; (8001054 <HAL_RCC_OscConfig+0x4f8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d0f0      	beq.n	8000e3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d106      	bne.n	8000e6e <HAL_RCC_OscConfig+0x312>
 8000e60:	4b7b      	ldr	r3, [pc, #492]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	4a7a      	ldr	r2, [pc, #488]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	6213      	str	r3, [r2, #32]
 8000e6c:	e02d      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x334>
 8000e76:	4b76      	ldr	r3, [pc, #472]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e78:	6a1b      	ldr	r3, [r3, #32]
 8000e7a:	4a75      	ldr	r2, [pc, #468]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6213      	str	r3, [r2, #32]
 8000e82:	4b73      	ldr	r3, [pc, #460]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e84:	6a1b      	ldr	r3, [r3, #32]
 8000e86:	4a72      	ldr	r2, [pc, #456]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	6213      	str	r3, [r2, #32]
 8000e8e:	e01c      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	2b05      	cmp	r3, #5
 8000e96:	d10c      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x356>
 8000e98:	4b6d      	ldr	r3, [pc, #436]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	4a6c      	ldr	r2, [pc, #432]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6213      	str	r3, [r2, #32]
 8000ea4:	4b6a      	ldr	r3, [pc, #424]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ea6:	6a1b      	ldr	r3, [r3, #32]
 8000ea8:	4a69      	ldr	r2, [pc, #420]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	6213      	str	r3, [r2, #32]
 8000eb0:	e00b      	b.n	8000eca <HAL_RCC_OscConfig+0x36e>
 8000eb2:	4b67      	ldr	r3, [pc, #412]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a66      	ldr	r2, [pc, #408]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000eb8:	f023 0301 	bic.w	r3, r3, #1
 8000ebc:	6213      	str	r3, [r2, #32]
 8000ebe:	4b64      	ldr	r3, [pc, #400]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a63      	ldr	r2, [pc, #396]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 0304 	bic.w	r3, r3, #4
 8000ec8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	68db      	ldr	r3, [r3, #12]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d015      	beq.n	8000efe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed2:	f7ff fba7 	bl	8000624 <HAL_GetTick>
 8000ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	e00a      	b.n	8000ef0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eda:	f7ff fba3 	bl	8000624 <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e0ab      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ef0:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	6a1b      	ldr	r3, [r3, #32]
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d0ee      	beq.n	8000eda <HAL_RCC_OscConfig+0x37e>
 8000efc:	e014      	b.n	8000f28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000efe:	f7ff fb91 	bl	8000624 <HAL_GetTick>
 8000f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	e00a      	b.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f06:	f7ff fb8d 	bl	8000624 <HAL_GetTick>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	1ad3      	subs	r3, r2, r3
 8000f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e095      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f1c:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f1e:	6a1b      	ldr	r3, [r3, #32]
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d1ee      	bne.n	8000f06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d105      	bne.n	8000f3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	f000 8081 	beq.w	8001046 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f44:	4b42      	ldr	r3, [pc, #264]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f003 030c 	and.w	r3, r3, #12
 8000f4c:	2b08      	cmp	r3, #8
 8000f4e:	d061      	beq.n	8001014 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69db      	ldr	r3, [r3, #28]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d146      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f58:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_RCC_OscConfig+0x4fc>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f5e:	f7ff fb61 	bl	8000624 <HAL_GetTick>
 8000f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f64:	e008      	b.n	8000f78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fb5d 	bl	8000624 <HAL_GetTick>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d901      	bls.n	8000f78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e067      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f78:	4b35      	ldr	r3, [pc, #212]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f0      	bne.n	8000f66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f8c:	d108      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f8e:	4b30      	ldr	r3, [pc, #192]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	492d      	ldr	r1, [pc, #180]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa0:	4b2b      	ldr	r3, [pc, #172]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a19      	ldr	r1, [r3, #32]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	430b      	orrs	r3, r1
 8000fb2:	4927      	ldr	r1, [pc, #156]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_RCC_OscConfig+0x4fc>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbe:	f7ff fb31 	bl	8000624 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc6:	f7ff fb2d 	bl	8000624 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e037      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x46a>
 8000fe4:	e02f      	b.n	8001046 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_RCC_OscConfig+0x4fc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fb1a 	bl	8000624 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000ff4:	f7ff fb16 	bl	8000624 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e020      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001006:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f0      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x498>
 8001012:	e018      	b.n	8001046 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d101      	bne.n	8001020 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	429a      	cmp	r2, r3
 8001032:	d106      	bne.n	8001042 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800103e:	429a      	cmp	r2, r3
 8001040:	d001      	beq.n	8001046 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	e000      	b.n	8001048 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	40021000 	.word	0x40021000
 8001054:	40007000 	.word	0x40007000
 8001058:	42420060 	.word	0x42420060

0800105c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d101      	bne.n	8001070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0d0      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001070:	4b6a      	ldr	r3, [pc, #424]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	429a      	cmp	r2, r3
 800107c:	d910      	bls.n	80010a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 0207 	bic.w	r2, r3, #7
 8001086:	4965      	ldr	r1, [pc, #404]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d001      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0b8      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b8:	4b59      	ldr	r3, [pc, #356]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80010c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d0:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	494d      	ldr	r1, [pc, #308]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d040      	beq.n	800117c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d115      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e07f      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d107      	bne.n	800112a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111a:	4b41      	ldr	r3, [pc, #260]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d109      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e073      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800112a:	4b3d      	ldr	r3, [pc, #244]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e06b      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800113a:	4b39      	ldr	r3, [pc, #228]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f023 0203 	bic.w	r2, r3, #3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	4936      	ldr	r1, [pc, #216]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800114c:	f7ff fa6a 	bl	8000624 <HAL_GetTick>
 8001150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001152:	e00a      	b.n	800116a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001154:	f7ff fa66 	bl	8000624 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001162:	4293      	cmp	r3, r2
 8001164:	d901      	bls.n	800116a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e053      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 020c 	and.w	r2, r3, #12
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	429a      	cmp	r2, r3
 800117a:	d1eb      	bne.n	8001154 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	429a      	cmp	r2, r3
 8001188:	d210      	bcs.n	80011ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118a:	4b24      	ldr	r3, [pc, #144]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f023 0207 	bic.w	r2, r3, #7
 8001192:	4922      	ldr	r1, [pc, #136]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	4313      	orrs	r3, r2
 8001198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e032      	b.n	8001212 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4916      	ldr	r1, [pc, #88]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	490e      	ldr	r1, [pc, #56]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011ea:	f000 f821 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 80011ee:	4601      	mov	r1, r0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_ClockConfig+0x1c4>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_RCC_ClockConfig+0x1c8>)
 80011fc:	5cd3      	ldrb	r3, [r2, r3]
 80011fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1cc>)
 8001204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1d0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f9c8 	bl	80005a0 <HAL_InitTick>

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000
 8001220:	40021000 	.word	0x40021000
 8001224:	080021b0 	.word	0x080021b0
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001230:	b490      	push	{r4, r7}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001236:	4b2a      	ldr	r3, [pc, #168]	; (80012e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001238:	1d3c      	adds	r4, r7, #4
 800123a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800123c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001240:	4b28      	ldr	r3, [pc, #160]	; (80012e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001246:	2300      	movs	r3, #0
 8001248:	61fb      	str	r3, [r7, #28]
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	2300      	movs	r3, #0
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800125a:	4b23      	ldr	r3, [pc, #140]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d002      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0x40>
 800126a:	2b08      	cmp	r3, #8
 800126c:	d003      	beq.n	8001276 <HAL_RCC_GetSysClockFreq+0x46>
 800126e:	e02d      	b.n	80012cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001270:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001272:	623b      	str	r3, [r7, #32]
      break;
 8001274:	e02d      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001282:	4413      	add	r3, r2
 8001284:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001288:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d013      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001294:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	0c5b      	lsrs	r3, r3, #17
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012a2:	4413      	add	r3, r2
 80012a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80012ae:	fb02 f203 	mul.w	r2, r2, r3
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
 80012ba:	e004      	b.n	80012c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	4a0c      	ldr	r2, [pc, #48]	; (80012f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012c0:	fb02 f303 	mul.w	r3, r2, r3
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	623b      	str	r3, [r7, #32]
      break;
 80012ca:	e002      	b.n	80012d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80012ce:	623b      	str	r3, [r7, #32]
      break;
 80012d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80012d2:	6a3b      	ldr	r3, [r7, #32]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc90      	pop	{r4, r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	0800219c 	.word	0x0800219c
 80012e4:	080021ac 	.word	0x080021ac
 80012e8:	40021000 	.word	0x40021000
 80012ec:	007a1200 	.word	0x007a1200
 80012f0:	003d0900 	.word	0x003d0900

080012f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80012fc:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <RCC_Delay+0x34>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <RCC_Delay+0x38>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0a5b      	lsrs	r3, r3, #9
 8001308:	687a      	ldr	r2, [r7, #4]
 800130a:	fb02 f303 	mul.w	r3, r2, r3
 800130e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001310:	bf00      	nop
  }
  while (Delay --);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1e5a      	subs	r2, r3, #1
 8001316:	60fa      	str	r2, [r7, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1f9      	bne.n	8001310 <RCC_Delay+0x1c>
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20000000 	.word	0x20000000
 800132c:	10624dd3 	.word	0x10624dd3

08001330 <__errno>:
 8001330:	4b01      	ldr	r3, [pc, #4]	; (8001338 <__errno+0x8>)
 8001332:	6818      	ldr	r0, [r3, #0]
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	2000000c 	.word	0x2000000c

0800133c <__libc_init_array>:
 800133c:	b570      	push	{r4, r5, r6, lr}
 800133e:	2500      	movs	r5, #0
 8001340:	4e0c      	ldr	r6, [pc, #48]	; (8001374 <__libc_init_array+0x38>)
 8001342:	4c0d      	ldr	r4, [pc, #52]	; (8001378 <__libc_init_array+0x3c>)
 8001344:	1ba4      	subs	r4, r4, r6
 8001346:	10a4      	asrs	r4, r4, #2
 8001348:	42a5      	cmp	r5, r4
 800134a:	d109      	bne.n	8001360 <__libc_init_array+0x24>
 800134c:	f000 ff10 	bl	8002170 <_init>
 8001350:	2500      	movs	r5, #0
 8001352:	4e0a      	ldr	r6, [pc, #40]	; (800137c <__libc_init_array+0x40>)
 8001354:	4c0a      	ldr	r4, [pc, #40]	; (8001380 <__libc_init_array+0x44>)
 8001356:	1ba4      	subs	r4, r4, r6
 8001358:	10a4      	asrs	r4, r4, #2
 800135a:	42a5      	cmp	r5, r4
 800135c:	d105      	bne.n	800136a <__libc_init_array+0x2e>
 800135e:	bd70      	pop	{r4, r5, r6, pc}
 8001360:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001364:	4798      	blx	r3
 8001366:	3501      	adds	r5, #1
 8001368:	e7ee      	b.n	8001348 <__libc_init_array+0xc>
 800136a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800136e:	4798      	blx	r3
 8001370:	3501      	adds	r5, #1
 8001372:	e7f2      	b.n	800135a <__libc_init_array+0x1e>
 8001374:	08002258 	.word	0x08002258
 8001378:	08002258 	.word	0x08002258
 800137c:	08002258 	.word	0x08002258
 8001380:	0800225c 	.word	0x0800225c

08001384 <memset>:
 8001384:	4603      	mov	r3, r0
 8001386:	4402      	add	r2, r0
 8001388:	4293      	cmp	r3, r2
 800138a:	d100      	bne.n	800138e <memset+0xa>
 800138c:	4770      	bx	lr
 800138e:	f803 1b01 	strb.w	r1, [r3], #1
 8001392:	e7f9      	b.n	8001388 <memset+0x4>

08001394 <iprintf>:
 8001394:	b40f      	push	{r0, r1, r2, r3}
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <iprintf+0x2c>)
 8001398:	b513      	push	{r0, r1, r4, lr}
 800139a:	681c      	ldr	r4, [r3, #0]
 800139c:	b124      	cbz	r4, 80013a8 <iprintf+0x14>
 800139e:	69a3      	ldr	r3, [r4, #24]
 80013a0:	b913      	cbnz	r3, 80013a8 <iprintf+0x14>
 80013a2:	4620      	mov	r0, r4
 80013a4:	f000 f84e 	bl	8001444 <__sinit>
 80013a8:	ab05      	add	r3, sp, #20
 80013aa:	9a04      	ldr	r2, [sp, #16]
 80013ac:	68a1      	ldr	r1, [r4, #8]
 80013ae:	4620      	mov	r0, r4
 80013b0:	9301      	str	r3, [sp, #4]
 80013b2:	f000 f953 	bl	800165c <_vfiprintf_r>
 80013b6:	b002      	add	sp, #8
 80013b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013bc:	b004      	add	sp, #16
 80013be:	4770      	bx	lr
 80013c0:	2000000c 	.word	0x2000000c

080013c4 <std>:
 80013c4:	2300      	movs	r3, #0
 80013c6:	b510      	push	{r4, lr}
 80013c8:	4604      	mov	r4, r0
 80013ca:	e9c0 3300 	strd	r3, r3, [r0]
 80013ce:	6083      	str	r3, [r0, #8]
 80013d0:	8181      	strh	r1, [r0, #12]
 80013d2:	6643      	str	r3, [r0, #100]	; 0x64
 80013d4:	81c2      	strh	r2, [r0, #14]
 80013d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80013da:	6183      	str	r3, [r0, #24]
 80013dc:	4619      	mov	r1, r3
 80013de:	2208      	movs	r2, #8
 80013e0:	305c      	adds	r0, #92	; 0x5c
 80013e2:	f7ff ffcf 	bl	8001384 <memset>
 80013e6:	4b05      	ldr	r3, [pc, #20]	; (80013fc <std+0x38>)
 80013e8:	6224      	str	r4, [r4, #32]
 80013ea:	6263      	str	r3, [r4, #36]	; 0x24
 80013ec:	4b04      	ldr	r3, [pc, #16]	; (8001400 <std+0x3c>)
 80013ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <std+0x40>)
 80013f2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <std+0x44>)
 80013f6:	6323      	str	r3, [r4, #48]	; 0x30
 80013f8:	bd10      	pop	{r4, pc}
 80013fa:	bf00      	nop
 80013fc:	08001bb9 	.word	0x08001bb9
 8001400:	08001bdb 	.word	0x08001bdb
 8001404:	08001c13 	.word	0x08001c13
 8001408:	08001c37 	.word	0x08001c37

0800140c <_cleanup_r>:
 800140c:	4901      	ldr	r1, [pc, #4]	; (8001414 <_cleanup_r+0x8>)
 800140e:	f000 b885 	b.w	800151c <_fwalk_reent>
 8001412:	bf00      	nop
 8001414:	08001f11 	.word	0x08001f11

08001418 <__sfmoreglue>:
 8001418:	b570      	push	{r4, r5, r6, lr}
 800141a:	2568      	movs	r5, #104	; 0x68
 800141c:	1e4a      	subs	r2, r1, #1
 800141e:	4355      	muls	r5, r2
 8001420:	460e      	mov	r6, r1
 8001422:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001426:	f000 f897 	bl	8001558 <_malloc_r>
 800142a:	4604      	mov	r4, r0
 800142c:	b140      	cbz	r0, 8001440 <__sfmoreglue+0x28>
 800142e:	2100      	movs	r1, #0
 8001430:	e9c0 1600 	strd	r1, r6, [r0]
 8001434:	300c      	adds	r0, #12
 8001436:	60a0      	str	r0, [r4, #8]
 8001438:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800143c:	f7ff ffa2 	bl	8001384 <memset>
 8001440:	4620      	mov	r0, r4
 8001442:	bd70      	pop	{r4, r5, r6, pc}

08001444 <__sinit>:
 8001444:	6983      	ldr	r3, [r0, #24]
 8001446:	b510      	push	{r4, lr}
 8001448:	4604      	mov	r4, r0
 800144a:	bb33      	cbnz	r3, 800149a <__sinit+0x56>
 800144c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001450:	6503      	str	r3, [r0, #80]	; 0x50
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <__sinit+0x58>)
 8001454:	4a12      	ldr	r2, [pc, #72]	; (80014a0 <__sinit+0x5c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6282      	str	r2, [r0, #40]	; 0x28
 800145a:	4298      	cmp	r0, r3
 800145c:	bf04      	itt	eq
 800145e:	2301      	moveq	r3, #1
 8001460:	6183      	streq	r3, [r0, #24]
 8001462:	f000 f81f 	bl	80014a4 <__sfp>
 8001466:	6060      	str	r0, [r4, #4]
 8001468:	4620      	mov	r0, r4
 800146a:	f000 f81b 	bl	80014a4 <__sfp>
 800146e:	60a0      	str	r0, [r4, #8]
 8001470:	4620      	mov	r0, r4
 8001472:	f000 f817 	bl	80014a4 <__sfp>
 8001476:	2200      	movs	r2, #0
 8001478:	60e0      	str	r0, [r4, #12]
 800147a:	2104      	movs	r1, #4
 800147c:	6860      	ldr	r0, [r4, #4]
 800147e:	f7ff ffa1 	bl	80013c4 <std>
 8001482:	2201      	movs	r2, #1
 8001484:	2109      	movs	r1, #9
 8001486:	68a0      	ldr	r0, [r4, #8]
 8001488:	f7ff ff9c 	bl	80013c4 <std>
 800148c:	2202      	movs	r2, #2
 800148e:	2112      	movs	r1, #18
 8001490:	68e0      	ldr	r0, [r4, #12]
 8001492:	f7ff ff97 	bl	80013c4 <std>
 8001496:	2301      	movs	r3, #1
 8001498:	61a3      	str	r3, [r4, #24]
 800149a:	bd10      	pop	{r4, pc}
 800149c:	080021c0 	.word	0x080021c0
 80014a0:	0800140d 	.word	0x0800140d

080014a4 <__sfp>:
 80014a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <__sfp+0x70>)
 80014a8:	4607      	mov	r7, r0
 80014aa:	681e      	ldr	r6, [r3, #0]
 80014ac:	69b3      	ldr	r3, [r6, #24]
 80014ae:	b913      	cbnz	r3, 80014b6 <__sfp+0x12>
 80014b0:	4630      	mov	r0, r6
 80014b2:	f7ff ffc7 	bl	8001444 <__sinit>
 80014b6:	3648      	adds	r6, #72	; 0x48
 80014b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80014bc:	3b01      	subs	r3, #1
 80014be:	d503      	bpl.n	80014c8 <__sfp+0x24>
 80014c0:	6833      	ldr	r3, [r6, #0]
 80014c2:	b133      	cbz	r3, 80014d2 <__sfp+0x2e>
 80014c4:	6836      	ldr	r6, [r6, #0]
 80014c6:	e7f7      	b.n	80014b8 <__sfp+0x14>
 80014c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80014cc:	b16d      	cbz	r5, 80014ea <__sfp+0x46>
 80014ce:	3468      	adds	r4, #104	; 0x68
 80014d0:	e7f4      	b.n	80014bc <__sfp+0x18>
 80014d2:	2104      	movs	r1, #4
 80014d4:	4638      	mov	r0, r7
 80014d6:	f7ff ff9f 	bl	8001418 <__sfmoreglue>
 80014da:	6030      	str	r0, [r6, #0]
 80014dc:	2800      	cmp	r0, #0
 80014de:	d1f1      	bne.n	80014c4 <__sfp+0x20>
 80014e0:	230c      	movs	r3, #12
 80014e2:	4604      	mov	r4, r0
 80014e4:	603b      	str	r3, [r7, #0]
 80014e6:	4620      	mov	r0, r4
 80014e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <__sfp+0x74>)
 80014ec:	6665      	str	r5, [r4, #100]	; 0x64
 80014ee:	e9c4 5500 	strd	r5, r5, [r4]
 80014f2:	60a5      	str	r5, [r4, #8]
 80014f4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80014f8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80014fc:	2208      	movs	r2, #8
 80014fe:	4629      	mov	r1, r5
 8001500:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001504:	f7ff ff3e 	bl	8001384 <memset>
 8001508:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800150c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001510:	e7e9      	b.n	80014e6 <__sfp+0x42>
 8001512:	bf00      	nop
 8001514:	080021c0 	.word	0x080021c0
 8001518:	ffff0001 	.word	0xffff0001

0800151c <_fwalk_reent>:
 800151c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001520:	4680      	mov	r8, r0
 8001522:	4689      	mov	r9, r1
 8001524:	2600      	movs	r6, #0
 8001526:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800152a:	b914      	cbnz	r4, 8001532 <_fwalk_reent+0x16>
 800152c:	4630      	mov	r0, r6
 800152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001532:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001536:	3f01      	subs	r7, #1
 8001538:	d501      	bpl.n	800153e <_fwalk_reent+0x22>
 800153a:	6824      	ldr	r4, [r4, #0]
 800153c:	e7f5      	b.n	800152a <_fwalk_reent+0xe>
 800153e:	89ab      	ldrh	r3, [r5, #12]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d907      	bls.n	8001554 <_fwalk_reent+0x38>
 8001544:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001548:	3301      	adds	r3, #1
 800154a:	d003      	beq.n	8001554 <_fwalk_reent+0x38>
 800154c:	4629      	mov	r1, r5
 800154e:	4640      	mov	r0, r8
 8001550:	47c8      	blx	r9
 8001552:	4306      	orrs	r6, r0
 8001554:	3568      	adds	r5, #104	; 0x68
 8001556:	e7ee      	b.n	8001536 <_fwalk_reent+0x1a>

08001558 <_malloc_r>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	1ccd      	adds	r5, r1, #3
 800155c:	f025 0503 	bic.w	r5, r5, #3
 8001560:	3508      	adds	r5, #8
 8001562:	2d0c      	cmp	r5, #12
 8001564:	bf38      	it	cc
 8001566:	250c      	movcc	r5, #12
 8001568:	2d00      	cmp	r5, #0
 800156a:	4606      	mov	r6, r0
 800156c:	db01      	blt.n	8001572 <_malloc_r+0x1a>
 800156e:	42a9      	cmp	r1, r5
 8001570:	d903      	bls.n	800157a <_malloc_r+0x22>
 8001572:	230c      	movs	r3, #12
 8001574:	6033      	str	r3, [r6, #0]
 8001576:	2000      	movs	r0, #0
 8001578:	bd70      	pop	{r4, r5, r6, pc}
 800157a:	f000 fd77 	bl	800206c <__malloc_lock>
 800157e:	4a21      	ldr	r2, [pc, #132]	; (8001604 <_malloc_r+0xac>)
 8001580:	6814      	ldr	r4, [r2, #0]
 8001582:	4621      	mov	r1, r4
 8001584:	b991      	cbnz	r1, 80015ac <_malloc_r+0x54>
 8001586:	4c20      	ldr	r4, [pc, #128]	; (8001608 <_malloc_r+0xb0>)
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	b91b      	cbnz	r3, 8001594 <_malloc_r+0x3c>
 800158c:	4630      	mov	r0, r6
 800158e:	f000 fb03 	bl	8001b98 <_sbrk_r>
 8001592:	6020      	str	r0, [r4, #0]
 8001594:	4629      	mov	r1, r5
 8001596:	4630      	mov	r0, r6
 8001598:	f000 fafe 	bl	8001b98 <_sbrk_r>
 800159c:	1c43      	adds	r3, r0, #1
 800159e:	d124      	bne.n	80015ea <_malloc_r+0x92>
 80015a0:	230c      	movs	r3, #12
 80015a2:	4630      	mov	r0, r6
 80015a4:	6033      	str	r3, [r6, #0]
 80015a6:	f000 fd62 	bl	800206e <__malloc_unlock>
 80015aa:	e7e4      	b.n	8001576 <_malloc_r+0x1e>
 80015ac:	680b      	ldr	r3, [r1, #0]
 80015ae:	1b5b      	subs	r3, r3, r5
 80015b0:	d418      	bmi.n	80015e4 <_malloc_r+0x8c>
 80015b2:	2b0b      	cmp	r3, #11
 80015b4:	d90f      	bls.n	80015d6 <_malloc_r+0x7e>
 80015b6:	600b      	str	r3, [r1, #0]
 80015b8:	18cc      	adds	r4, r1, r3
 80015ba:	50cd      	str	r5, [r1, r3]
 80015bc:	4630      	mov	r0, r6
 80015be:	f000 fd56 	bl	800206e <__malloc_unlock>
 80015c2:	f104 000b 	add.w	r0, r4, #11
 80015c6:	1d23      	adds	r3, r4, #4
 80015c8:	f020 0007 	bic.w	r0, r0, #7
 80015cc:	1ac3      	subs	r3, r0, r3
 80015ce:	d0d3      	beq.n	8001578 <_malloc_r+0x20>
 80015d0:	425a      	negs	r2, r3
 80015d2:	50e2      	str	r2, [r4, r3]
 80015d4:	e7d0      	b.n	8001578 <_malloc_r+0x20>
 80015d6:	684b      	ldr	r3, [r1, #4]
 80015d8:	428c      	cmp	r4, r1
 80015da:	bf16      	itet	ne
 80015dc:	6063      	strne	r3, [r4, #4]
 80015de:	6013      	streq	r3, [r2, #0]
 80015e0:	460c      	movne	r4, r1
 80015e2:	e7eb      	b.n	80015bc <_malloc_r+0x64>
 80015e4:	460c      	mov	r4, r1
 80015e6:	6849      	ldr	r1, [r1, #4]
 80015e8:	e7cc      	b.n	8001584 <_malloc_r+0x2c>
 80015ea:	1cc4      	adds	r4, r0, #3
 80015ec:	f024 0403 	bic.w	r4, r4, #3
 80015f0:	42a0      	cmp	r0, r4
 80015f2:	d005      	beq.n	8001600 <_malloc_r+0xa8>
 80015f4:	1a21      	subs	r1, r4, r0
 80015f6:	4630      	mov	r0, r6
 80015f8:	f000 face 	bl	8001b98 <_sbrk_r>
 80015fc:	3001      	adds	r0, #1
 80015fe:	d0cf      	beq.n	80015a0 <_malloc_r+0x48>
 8001600:	6025      	str	r5, [r4, #0]
 8001602:	e7db      	b.n	80015bc <_malloc_r+0x64>
 8001604:	20000090 	.word	0x20000090
 8001608:	20000094 	.word	0x20000094

0800160c <__sfputc_r>:
 800160c:	6893      	ldr	r3, [r2, #8]
 800160e:	b410      	push	{r4}
 8001610:	3b01      	subs	r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	6093      	str	r3, [r2, #8]
 8001616:	da07      	bge.n	8001628 <__sfputc_r+0x1c>
 8001618:	6994      	ldr	r4, [r2, #24]
 800161a:	42a3      	cmp	r3, r4
 800161c:	db01      	blt.n	8001622 <__sfputc_r+0x16>
 800161e:	290a      	cmp	r1, #10
 8001620:	d102      	bne.n	8001628 <__sfputc_r+0x1c>
 8001622:	bc10      	pop	{r4}
 8001624:	f000 bb0c 	b.w	8001c40 <__swbuf_r>
 8001628:	6813      	ldr	r3, [r2, #0]
 800162a:	1c58      	adds	r0, r3, #1
 800162c:	6010      	str	r0, [r2, #0]
 800162e:	7019      	strb	r1, [r3, #0]
 8001630:	4608      	mov	r0, r1
 8001632:	bc10      	pop	{r4}
 8001634:	4770      	bx	lr

08001636 <__sfputs_r>:
 8001636:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001638:	4606      	mov	r6, r0
 800163a:	460f      	mov	r7, r1
 800163c:	4614      	mov	r4, r2
 800163e:	18d5      	adds	r5, r2, r3
 8001640:	42ac      	cmp	r4, r5
 8001642:	d101      	bne.n	8001648 <__sfputs_r+0x12>
 8001644:	2000      	movs	r0, #0
 8001646:	e007      	b.n	8001658 <__sfputs_r+0x22>
 8001648:	463a      	mov	r2, r7
 800164a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800164e:	4630      	mov	r0, r6
 8001650:	f7ff ffdc 	bl	800160c <__sfputc_r>
 8001654:	1c43      	adds	r3, r0, #1
 8001656:	d1f3      	bne.n	8001640 <__sfputs_r+0xa>
 8001658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800165c <_vfiprintf_r>:
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	460c      	mov	r4, r1
 8001662:	b09d      	sub	sp, #116	; 0x74
 8001664:	4617      	mov	r7, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4606      	mov	r6, r0
 800166a:	b118      	cbz	r0, 8001674 <_vfiprintf_r+0x18>
 800166c:	6983      	ldr	r3, [r0, #24]
 800166e:	b90b      	cbnz	r3, 8001674 <_vfiprintf_r+0x18>
 8001670:	f7ff fee8 	bl	8001444 <__sinit>
 8001674:	4b7c      	ldr	r3, [pc, #496]	; (8001868 <_vfiprintf_r+0x20c>)
 8001676:	429c      	cmp	r4, r3
 8001678:	d158      	bne.n	800172c <_vfiprintf_r+0xd0>
 800167a:	6874      	ldr	r4, [r6, #4]
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	0718      	lsls	r0, r3, #28
 8001680:	d55e      	bpl.n	8001740 <_vfiprintf_r+0xe4>
 8001682:	6923      	ldr	r3, [r4, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d05b      	beq.n	8001740 <_vfiprintf_r+0xe4>
 8001688:	2300      	movs	r3, #0
 800168a:	9309      	str	r3, [sp, #36]	; 0x24
 800168c:	2320      	movs	r3, #32
 800168e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001692:	2330      	movs	r3, #48	; 0x30
 8001694:	f04f 0b01 	mov.w	fp, #1
 8001698:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800169c:	9503      	str	r5, [sp, #12]
 800169e:	46b8      	mov	r8, r7
 80016a0:	4645      	mov	r5, r8
 80016a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80016a6:	b10b      	cbz	r3, 80016ac <_vfiprintf_r+0x50>
 80016a8:	2b25      	cmp	r3, #37	; 0x25
 80016aa:	d154      	bne.n	8001756 <_vfiprintf_r+0xfa>
 80016ac:	ebb8 0a07 	subs.w	sl, r8, r7
 80016b0:	d00b      	beq.n	80016ca <_vfiprintf_r+0x6e>
 80016b2:	4653      	mov	r3, sl
 80016b4:	463a      	mov	r2, r7
 80016b6:	4621      	mov	r1, r4
 80016b8:	4630      	mov	r0, r6
 80016ba:	f7ff ffbc 	bl	8001636 <__sfputs_r>
 80016be:	3001      	adds	r0, #1
 80016c0:	f000 80c2 	beq.w	8001848 <_vfiprintf_r+0x1ec>
 80016c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80016c6:	4453      	add	r3, sl
 80016c8:	9309      	str	r3, [sp, #36]	; 0x24
 80016ca:	f898 3000 	ldrb.w	r3, [r8]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 80ba 	beq.w	8001848 <_vfiprintf_r+0x1ec>
 80016d4:	2300      	movs	r3, #0
 80016d6:	f04f 32ff 	mov.w	r2, #4294967295
 80016da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016de:	9304      	str	r3, [sp, #16]
 80016e0:	9307      	str	r3, [sp, #28]
 80016e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016e6:	931a      	str	r3, [sp, #104]	; 0x68
 80016e8:	46a8      	mov	r8, r5
 80016ea:	2205      	movs	r2, #5
 80016ec:	f818 1b01 	ldrb.w	r1, [r8], #1
 80016f0:	485e      	ldr	r0, [pc, #376]	; (800186c <_vfiprintf_r+0x210>)
 80016f2:	f000 fcad 	bl	8002050 <memchr>
 80016f6:	9b04      	ldr	r3, [sp, #16]
 80016f8:	bb78      	cbnz	r0, 800175a <_vfiprintf_r+0xfe>
 80016fa:	06d9      	lsls	r1, r3, #27
 80016fc:	bf44      	itt	mi
 80016fe:	2220      	movmi	r2, #32
 8001700:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001704:	071a      	lsls	r2, r3, #28
 8001706:	bf44      	itt	mi
 8001708:	222b      	movmi	r2, #43	; 0x2b
 800170a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800170e:	782a      	ldrb	r2, [r5, #0]
 8001710:	2a2a      	cmp	r2, #42	; 0x2a
 8001712:	d02a      	beq.n	800176a <_vfiprintf_r+0x10e>
 8001714:	46a8      	mov	r8, r5
 8001716:	2000      	movs	r0, #0
 8001718:	250a      	movs	r5, #10
 800171a:	9a07      	ldr	r2, [sp, #28]
 800171c:	4641      	mov	r1, r8
 800171e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001722:	3b30      	subs	r3, #48	; 0x30
 8001724:	2b09      	cmp	r3, #9
 8001726:	d969      	bls.n	80017fc <_vfiprintf_r+0x1a0>
 8001728:	b360      	cbz	r0, 8001784 <_vfiprintf_r+0x128>
 800172a:	e024      	b.n	8001776 <_vfiprintf_r+0x11a>
 800172c:	4b50      	ldr	r3, [pc, #320]	; (8001870 <_vfiprintf_r+0x214>)
 800172e:	429c      	cmp	r4, r3
 8001730:	d101      	bne.n	8001736 <_vfiprintf_r+0xda>
 8001732:	68b4      	ldr	r4, [r6, #8]
 8001734:	e7a2      	b.n	800167c <_vfiprintf_r+0x20>
 8001736:	4b4f      	ldr	r3, [pc, #316]	; (8001874 <_vfiprintf_r+0x218>)
 8001738:	429c      	cmp	r4, r3
 800173a:	bf08      	it	eq
 800173c:	68f4      	ldreq	r4, [r6, #12]
 800173e:	e79d      	b.n	800167c <_vfiprintf_r+0x20>
 8001740:	4621      	mov	r1, r4
 8001742:	4630      	mov	r0, r6
 8001744:	f000 fae0 	bl	8001d08 <__swsetup_r>
 8001748:	2800      	cmp	r0, #0
 800174a:	d09d      	beq.n	8001688 <_vfiprintf_r+0x2c>
 800174c:	f04f 30ff 	mov.w	r0, #4294967295
 8001750:	b01d      	add	sp, #116	; 0x74
 8001752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001756:	46a8      	mov	r8, r5
 8001758:	e7a2      	b.n	80016a0 <_vfiprintf_r+0x44>
 800175a:	4a44      	ldr	r2, [pc, #272]	; (800186c <_vfiprintf_r+0x210>)
 800175c:	4645      	mov	r5, r8
 800175e:	1a80      	subs	r0, r0, r2
 8001760:	fa0b f000 	lsl.w	r0, fp, r0
 8001764:	4318      	orrs	r0, r3
 8001766:	9004      	str	r0, [sp, #16]
 8001768:	e7be      	b.n	80016e8 <_vfiprintf_r+0x8c>
 800176a:	9a03      	ldr	r2, [sp, #12]
 800176c:	1d11      	adds	r1, r2, #4
 800176e:	6812      	ldr	r2, [r2, #0]
 8001770:	9103      	str	r1, [sp, #12]
 8001772:	2a00      	cmp	r2, #0
 8001774:	db01      	blt.n	800177a <_vfiprintf_r+0x11e>
 8001776:	9207      	str	r2, [sp, #28]
 8001778:	e004      	b.n	8001784 <_vfiprintf_r+0x128>
 800177a:	4252      	negs	r2, r2
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	9207      	str	r2, [sp, #28]
 8001782:	9304      	str	r3, [sp, #16]
 8001784:	f898 3000 	ldrb.w	r3, [r8]
 8001788:	2b2e      	cmp	r3, #46	; 0x2e
 800178a:	d10e      	bne.n	80017aa <_vfiprintf_r+0x14e>
 800178c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001790:	2b2a      	cmp	r3, #42	; 0x2a
 8001792:	d138      	bne.n	8001806 <_vfiprintf_r+0x1aa>
 8001794:	9b03      	ldr	r3, [sp, #12]
 8001796:	f108 0802 	add.w	r8, r8, #2
 800179a:	1d1a      	adds	r2, r3, #4
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	9203      	str	r2, [sp, #12]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	bfb8      	it	lt
 80017a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80017a8:	9305      	str	r3, [sp, #20]
 80017aa:	4d33      	ldr	r5, [pc, #204]	; (8001878 <_vfiprintf_r+0x21c>)
 80017ac:	2203      	movs	r2, #3
 80017ae:	f898 1000 	ldrb.w	r1, [r8]
 80017b2:	4628      	mov	r0, r5
 80017b4:	f000 fc4c 	bl	8002050 <memchr>
 80017b8:	b140      	cbz	r0, 80017cc <_vfiprintf_r+0x170>
 80017ba:	2340      	movs	r3, #64	; 0x40
 80017bc:	1b40      	subs	r0, r0, r5
 80017be:	fa03 f000 	lsl.w	r0, r3, r0
 80017c2:	9b04      	ldr	r3, [sp, #16]
 80017c4:	f108 0801 	add.w	r8, r8, #1
 80017c8:	4303      	orrs	r3, r0
 80017ca:	9304      	str	r3, [sp, #16]
 80017cc:	f898 1000 	ldrb.w	r1, [r8]
 80017d0:	2206      	movs	r2, #6
 80017d2:	482a      	ldr	r0, [pc, #168]	; (800187c <_vfiprintf_r+0x220>)
 80017d4:	f108 0701 	add.w	r7, r8, #1
 80017d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80017dc:	f000 fc38 	bl	8002050 <memchr>
 80017e0:	2800      	cmp	r0, #0
 80017e2:	d037      	beq.n	8001854 <_vfiprintf_r+0x1f8>
 80017e4:	4b26      	ldr	r3, [pc, #152]	; (8001880 <_vfiprintf_r+0x224>)
 80017e6:	bb1b      	cbnz	r3, 8001830 <_vfiprintf_r+0x1d4>
 80017e8:	9b03      	ldr	r3, [sp, #12]
 80017ea:	3307      	adds	r3, #7
 80017ec:	f023 0307 	bic.w	r3, r3, #7
 80017f0:	3308      	adds	r3, #8
 80017f2:	9303      	str	r3, [sp, #12]
 80017f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017f6:	444b      	add	r3, r9
 80017f8:	9309      	str	r3, [sp, #36]	; 0x24
 80017fa:	e750      	b.n	800169e <_vfiprintf_r+0x42>
 80017fc:	fb05 3202 	mla	r2, r5, r2, r3
 8001800:	2001      	movs	r0, #1
 8001802:	4688      	mov	r8, r1
 8001804:	e78a      	b.n	800171c <_vfiprintf_r+0xc0>
 8001806:	2300      	movs	r3, #0
 8001808:	250a      	movs	r5, #10
 800180a:	4619      	mov	r1, r3
 800180c:	f108 0801 	add.w	r8, r8, #1
 8001810:	9305      	str	r3, [sp, #20]
 8001812:	4640      	mov	r0, r8
 8001814:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001818:	3a30      	subs	r2, #48	; 0x30
 800181a:	2a09      	cmp	r2, #9
 800181c:	d903      	bls.n	8001826 <_vfiprintf_r+0x1ca>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d0c3      	beq.n	80017aa <_vfiprintf_r+0x14e>
 8001822:	9105      	str	r1, [sp, #20]
 8001824:	e7c1      	b.n	80017aa <_vfiprintf_r+0x14e>
 8001826:	fb05 2101 	mla	r1, r5, r1, r2
 800182a:	2301      	movs	r3, #1
 800182c:	4680      	mov	r8, r0
 800182e:	e7f0      	b.n	8001812 <_vfiprintf_r+0x1b6>
 8001830:	ab03      	add	r3, sp, #12
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	4622      	mov	r2, r4
 8001836:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_vfiprintf_r+0x228>)
 8001838:	a904      	add	r1, sp, #16
 800183a:	4630      	mov	r0, r6
 800183c:	f3af 8000 	nop.w
 8001840:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001844:	4681      	mov	r9, r0
 8001846:	d1d5      	bne.n	80017f4 <_vfiprintf_r+0x198>
 8001848:	89a3      	ldrh	r3, [r4, #12]
 800184a:	065b      	lsls	r3, r3, #25
 800184c:	f53f af7e 	bmi.w	800174c <_vfiprintf_r+0xf0>
 8001850:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001852:	e77d      	b.n	8001750 <_vfiprintf_r+0xf4>
 8001854:	ab03      	add	r3, sp, #12
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	4622      	mov	r2, r4
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <_vfiprintf_r+0x228>)
 800185c:	a904      	add	r1, sp, #16
 800185e:	4630      	mov	r0, r6
 8001860:	f000 f888 	bl	8001974 <_printf_i>
 8001864:	e7ec      	b.n	8001840 <_vfiprintf_r+0x1e4>
 8001866:	bf00      	nop
 8001868:	080021e4 	.word	0x080021e4
 800186c:	08002224 	.word	0x08002224
 8001870:	08002204 	.word	0x08002204
 8001874:	080021c4 	.word	0x080021c4
 8001878:	0800222a 	.word	0x0800222a
 800187c:	0800222e 	.word	0x0800222e
 8001880:	00000000 	.word	0x00000000
 8001884:	08001637 	.word	0x08001637

08001888 <_printf_common>:
 8001888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800188c:	4691      	mov	r9, r2
 800188e:	461f      	mov	r7, r3
 8001890:	688a      	ldr	r2, [r1, #8]
 8001892:	690b      	ldr	r3, [r1, #16]
 8001894:	4606      	mov	r6, r0
 8001896:	4293      	cmp	r3, r2
 8001898:	bfb8      	it	lt
 800189a:	4613      	movlt	r3, r2
 800189c:	f8c9 3000 	str.w	r3, [r9]
 80018a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018a4:	460c      	mov	r4, r1
 80018a6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018aa:	b112      	cbz	r2, 80018b2 <_printf_common+0x2a>
 80018ac:	3301      	adds	r3, #1
 80018ae:	f8c9 3000 	str.w	r3, [r9]
 80018b2:	6823      	ldr	r3, [r4, #0]
 80018b4:	0699      	lsls	r1, r3, #26
 80018b6:	bf42      	ittt	mi
 80018b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80018bc:	3302      	addmi	r3, #2
 80018be:	f8c9 3000 	strmi.w	r3, [r9]
 80018c2:	6825      	ldr	r5, [r4, #0]
 80018c4:	f015 0506 	ands.w	r5, r5, #6
 80018c8:	d107      	bne.n	80018da <_printf_common+0x52>
 80018ca:	f104 0a19 	add.w	sl, r4, #25
 80018ce:	68e3      	ldr	r3, [r4, #12]
 80018d0:	f8d9 2000 	ldr.w	r2, [r9]
 80018d4:	1a9b      	subs	r3, r3, r2
 80018d6:	42ab      	cmp	r3, r5
 80018d8:	dc29      	bgt.n	800192e <_printf_common+0xa6>
 80018da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80018de:	6822      	ldr	r2, [r4, #0]
 80018e0:	3300      	adds	r3, #0
 80018e2:	bf18      	it	ne
 80018e4:	2301      	movne	r3, #1
 80018e6:	0692      	lsls	r2, r2, #26
 80018e8:	d42e      	bmi.n	8001948 <_printf_common+0xc0>
 80018ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018ee:	4639      	mov	r1, r7
 80018f0:	4630      	mov	r0, r6
 80018f2:	47c0      	blx	r8
 80018f4:	3001      	adds	r0, #1
 80018f6:	d021      	beq.n	800193c <_printf_common+0xb4>
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	68e5      	ldr	r5, [r4, #12]
 80018fc:	f003 0306 	and.w	r3, r3, #6
 8001900:	2b04      	cmp	r3, #4
 8001902:	bf18      	it	ne
 8001904:	2500      	movne	r5, #0
 8001906:	f8d9 2000 	ldr.w	r2, [r9]
 800190a:	f04f 0900 	mov.w	r9, #0
 800190e:	bf08      	it	eq
 8001910:	1aad      	subeq	r5, r5, r2
 8001912:	68a3      	ldr	r3, [r4, #8]
 8001914:	6922      	ldr	r2, [r4, #16]
 8001916:	bf08      	it	eq
 8001918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800191c:	4293      	cmp	r3, r2
 800191e:	bfc4      	itt	gt
 8001920:	1a9b      	subgt	r3, r3, r2
 8001922:	18ed      	addgt	r5, r5, r3
 8001924:	341a      	adds	r4, #26
 8001926:	454d      	cmp	r5, r9
 8001928:	d11a      	bne.n	8001960 <_printf_common+0xd8>
 800192a:	2000      	movs	r0, #0
 800192c:	e008      	b.n	8001940 <_printf_common+0xb8>
 800192e:	2301      	movs	r3, #1
 8001930:	4652      	mov	r2, sl
 8001932:	4639      	mov	r1, r7
 8001934:	4630      	mov	r0, r6
 8001936:	47c0      	blx	r8
 8001938:	3001      	adds	r0, #1
 800193a:	d103      	bne.n	8001944 <_printf_common+0xbc>
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001944:	3501      	adds	r5, #1
 8001946:	e7c2      	b.n	80018ce <_printf_common+0x46>
 8001948:	2030      	movs	r0, #48	; 0x30
 800194a:	18e1      	adds	r1, r4, r3
 800194c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001956:	4422      	add	r2, r4
 8001958:	3302      	adds	r3, #2
 800195a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800195e:	e7c4      	b.n	80018ea <_printf_common+0x62>
 8001960:	2301      	movs	r3, #1
 8001962:	4622      	mov	r2, r4
 8001964:	4639      	mov	r1, r7
 8001966:	4630      	mov	r0, r6
 8001968:	47c0      	blx	r8
 800196a:	3001      	adds	r0, #1
 800196c:	d0e6      	beq.n	800193c <_printf_common+0xb4>
 800196e:	f109 0901 	add.w	r9, r9, #1
 8001972:	e7d8      	b.n	8001926 <_printf_common+0x9e>

08001974 <_printf_i>:
 8001974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001978:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800197c:	460c      	mov	r4, r1
 800197e:	7e09      	ldrb	r1, [r1, #24]
 8001980:	b085      	sub	sp, #20
 8001982:	296e      	cmp	r1, #110	; 0x6e
 8001984:	4617      	mov	r7, r2
 8001986:	4606      	mov	r6, r0
 8001988:	4698      	mov	r8, r3
 800198a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800198c:	f000 80b3 	beq.w	8001af6 <_printf_i+0x182>
 8001990:	d822      	bhi.n	80019d8 <_printf_i+0x64>
 8001992:	2963      	cmp	r1, #99	; 0x63
 8001994:	d036      	beq.n	8001a04 <_printf_i+0x90>
 8001996:	d80a      	bhi.n	80019ae <_printf_i+0x3a>
 8001998:	2900      	cmp	r1, #0
 800199a:	f000 80b9 	beq.w	8001b10 <_printf_i+0x19c>
 800199e:	2958      	cmp	r1, #88	; 0x58
 80019a0:	f000 8083 	beq.w	8001aaa <_printf_i+0x136>
 80019a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80019ac:	e032      	b.n	8001a14 <_printf_i+0xa0>
 80019ae:	2964      	cmp	r1, #100	; 0x64
 80019b0:	d001      	beq.n	80019b6 <_printf_i+0x42>
 80019b2:	2969      	cmp	r1, #105	; 0x69
 80019b4:	d1f6      	bne.n	80019a4 <_printf_i+0x30>
 80019b6:	6820      	ldr	r0, [r4, #0]
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	0605      	lsls	r5, r0, #24
 80019bc:	f103 0104 	add.w	r1, r3, #4
 80019c0:	d52a      	bpl.n	8001a18 <_printf_i+0xa4>
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6011      	str	r1, [r2, #0]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da03      	bge.n	80019d2 <_printf_i+0x5e>
 80019ca:	222d      	movs	r2, #45	; 0x2d
 80019cc:	425b      	negs	r3, r3
 80019ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80019d2:	486f      	ldr	r0, [pc, #444]	; (8001b90 <_printf_i+0x21c>)
 80019d4:	220a      	movs	r2, #10
 80019d6:	e039      	b.n	8001a4c <_printf_i+0xd8>
 80019d8:	2973      	cmp	r1, #115	; 0x73
 80019da:	f000 809d 	beq.w	8001b18 <_printf_i+0x1a4>
 80019de:	d808      	bhi.n	80019f2 <_printf_i+0x7e>
 80019e0:	296f      	cmp	r1, #111	; 0x6f
 80019e2:	d020      	beq.n	8001a26 <_printf_i+0xb2>
 80019e4:	2970      	cmp	r1, #112	; 0x70
 80019e6:	d1dd      	bne.n	80019a4 <_printf_i+0x30>
 80019e8:	6823      	ldr	r3, [r4, #0]
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	6023      	str	r3, [r4, #0]
 80019f0:	e003      	b.n	80019fa <_printf_i+0x86>
 80019f2:	2975      	cmp	r1, #117	; 0x75
 80019f4:	d017      	beq.n	8001a26 <_printf_i+0xb2>
 80019f6:	2978      	cmp	r1, #120	; 0x78
 80019f8:	d1d4      	bne.n	80019a4 <_printf_i+0x30>
 80019fa:	2378      	movs	r3, #120	; 0x78
 80019fc:	4865      	ldr	r0, [pc, #404]	; (8001b94 <_printf_i+0x220>)
 80019fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001a02:	e055      	b.n	8001ab0 <_printf_i+0x13c>
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a0a:	1d19      	adds	r1, r3, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6011      	str	r1, [r2, #0]
 8001a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a14:	2301      	movs	r3, #1
 8001a16:	e08c      	b.n	8001b32 <_printf_i+0x1be>
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001a1e:	6011      	str	r1, [r2, #0]
 8001a20:	bf18      	it	ne
 8001a22:	b21b      	sxthne	r3, r3
 8001a24:	e7cf      	b.n	80019c6 <_printf_i+0x52>
 8001a26:	6813      	ldr	r3, [r2, #0]
 8001a28:	6825      	ldr	r5, [r4, #0]
 8001a2a:	1d18      	adds	r0, r3, #4
 8001a2c:	6010      	str	r0, [r2, #0]
 8001a2e:	0628      	lsls	r0, r5, #24
 8001a30:	d501      	bpl.n	8001a36 <_printf_i+0xc2>
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	e002      	b.n	8001a3c <_printf_i+0xc8>
 8001a36:	0668      	lsls	r0, r5, #25
 8001a38:	d5fb      	bpl.n	8001a32 <_printf_i+0xbe>
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	296f      	cmp	r1, #111	; 0x6f
 8001a3e:	bf14      	ite	ne
 8001a40:	220a      	movne	r2, #10
 8001a42:	2208      	moveq	r2, #8
 8001a44:	4852      	ldr	r0, [pc, #328]	; (8001b90 <_printf_i+0x21c>)
 8001a46:	2100      	movs	r1, #0
 8001a48:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a4c:	6865      	ldr	r5, [r4, #4]
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	60a5      	str	r5, [r4, #8]
 8001a52:	f2c0 8095 	blt.w	8001b80 <_printf_i+0x20c>
 8001a56:	6821      	ldr	r1, [r4, #0]
 8001a58:	f021 0104 	bic.w	r1, r1, #4
 8001a5c:	6021      	str	r1, [r4, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d13d      	bne.n	8001ade <_printf_i+0x16a>
 8001a62:	2d00      	cmp	r5, #0
 8001a64:	f040 808e 	bne.w	8001b84 <_printf_i+0x210>
 8001a68:	4665      	mov	r5, ip
 8001a6a:	2a08      	cmp	r2, #8
 8001a6c:	d10b      	bne.n	8001a86 <_printf_i+0x112>
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	07db      	lsls	r3, r3, #31
 8001a72:	d508      	bpl.n	8001a86 <_printf_i+0x112>
 8001a74:	6923      	ldr	r3, [r4, #16]
 8001a76:	6862      	ldr	r2, [r4, #4]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	bfde      	ittt	le
 8001a7c:	2330      	movle	r3, #48	; 0x30
 8001a7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001a82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001a86:	ebac 0305 	sub.w	r3, ip, r5
 8001a8a:	6123      	str	r3, [r4, #16]
 8001a8c:	f8cd 8000 	str.w	r8, [sp]
 8001a90:	463b      	mov	r3, r7
 8001a92:	aa03      	add	r2, sp, #12
 8001a94:	4621      	mov	r1, r4
 8001a96:	4630      	mov	r0, r6
 8001a98:	f7ff fef6 	bl	8001888 <_printf_common>
 8001a9c:	3001      	adds	r0, #1
 8001a9e:	d14d      	bne.n	8001b3c <_printf_i+0x1c8>
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa4:	b005      	add	sp, #20
 8001aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001aaa:	4839      	ldr	r0, [pc, #228]	; (8001b90 <_printf_i+0x21c>)
 8001aac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001ab0:	6813      	ldr	r3, [r2, #0]
 8001ab2:	6821      	ldr	r1, [r4, #0]
 8001ab4:	1d1d      	adds	r5, r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6015      	str	r5, [r2, #0]
 8001aba:	060a      	lsls	r2, r1, #24
 8001abc:	d50b      	bpl.n	8001ad6 <_printf_i+0x162>
 8001abe:	07ca      	lsls	r2, r1, #31
 8001ac0:	bf44      	itt	mi
 8001ac2:	f041 0120 	orrmi.w	r1, r1, #32
 8001ac6:	6021      	strmi	r1, [r4, #0]
 8001ac8:	b91b      	cbnz	r3, 8001ad2 <_printf_i+0x15e>
 8001aca:	6822      	ldr	r2, [r4, #0]
 8001acc:	f022 0220 	bic.w	r2, r2, #32
 8001ad0:	6022      	str	r2, [r4, #0]
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	e7b7      	b.n	8001a46 <_printf_i+0xd2>
 8001ad6:	064d      	lsls	r5, r1, #25
 8001ad8:	bf48      	it	mi
 8001ada:	b29b      	uxthmi	r3, r3
 8001adc:	e7ef      	b.n	8001abe <_printf_i+0x14a>
 8001ade:	4665      	mov	r5, ip
 8001ae0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ae4:	fb02 3311 	mls	r3, r2, r1, r3
 8001ae8:	5cc3      	ldrb	r3, [r0, r3]
 8001aea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001aee:	460b      	mov	r3, r1
 8001af0:	2900      	cmp	r1, #0
 8001af2:	d1f5      	bne.n	8001ae0 <_printf_i+0x16c>
 8001af4:	e7b9      	b.n	8001a6a <_printf_i+0xf6>
 8001af6:	6813      	ldr	r3, [r2, #0]
 8001af8:	6825      	ldr	r5, [r4, #0]
 8001afa:	1d18      	adds	r0, r3, #4
 8001afc:	6961      	ldr	r1, [r4, #20]
 8001afe:	6010      	str	r0, [r2, #0]
 8001b00:	0628      	lsls	r0, r5, #24
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	d501      	bpl.n	8001b0a <_printf_i+0x196>
 8001b06:	6019      	str	r1, [r3, #0]
 8001b08:	e002      	b.n	8001b10 <_printf_i+0x19c>
 8001b0a:	066a      	lsls	r2, r5, #25
 8001b0c:	d5fb      	bpl.n	8001b06 <_printf_i+0x192>
 8001b0e:	8019      	strh	r1, [r3, #0]
 8001b10:	2300      	movs	r3, #0
 8001b12:	4665      	mov	r5, ip
 8001b14:	6123      	str	r3, [r4, #16]
 8001b16:	e7b9      	b.n	8001a8c <_printf_i+0x118>
 8001b18:	6813      	ldr	r3, [r2, #0]
 8001b1a:	1d19      	adds	r1, r3, #4
 8001b1c:	6011      	str	r1, [r2, #0]
 8001b1e:	681d      	ldr	r5, [r3, #0]
 8001b20:	6862      	ldr	r2, [r4, #4]
 8001b22:	2100      	movs	r1, #0
 8001b24:	4628      	mov	r0, r5
 8001b26:	f000 fa93 	bl	8002050 <memchr>
 8001b2a:	b108      	cbz	r0, 8001b30 <_printf_i+0x1bc>
 8001b2c:	1b40      	subs	r0, r0, r5
 8001b2e:	6060      	str	r0, [r4, #4]
 8001b30:	6863      	ldr	r3, [r4, #4]
 8001b32:	6123      	str	r3, [r4, #16]
 8001b34:	2300      	movs	r3, #0
 8001b36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b3a:	e7a7      	b.n	8001a8c <_printf_i+0x118>
 8001b3c:	6923      	ldr	r3, [r4, #16]
 8001b3e:	462a      	mov	r2, r5
 8001b40:	4639      	mov	r1, r7
 8001b42:	4630      	mov	r0, r6
 8001b44:	47c0      	blx	r8
 8001b46:	3001      	adds	r0, #1
 8001b48:	d0aa      	beq.n	8001aa0 <_printf_i+0x12c>
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	079b      	lsls	r3, r3, #30
 8001b4e:	d413      	bmi.n	8001b78 <_printf_i+0x204>
 8001b50:	68e0      	ldr	r0, [r4, #12]
 8001b52:	9b03      	ldr	r3, [sp, #12]
 8001b54:	4298      	cmp	r0, r3
 8001b56:	bfb8      	it	lt
 8001b58:	4618      	movlt	r0, r3
 8001b5a:	e7a3      	b.n	8001aa4 <_printf_i+0x130>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	464a      	mov	r2, r9
 8001b60:	4639      	mov	r1, r7
 8001b62:	4630      	mov	r0, r6
 8001b64:	47c0      	blx	r8
 8001b66:	3001      	adds	r0, #1
 8001b68:	d09a      	beq.n	8001aa0 <_printf_i+0x12c>
 8001b6a:	3501      	adds	r5, #1
 8001b6c:	68e3      	ldr	r3, [r4, #12]
 8001b6e:	9a03      	ldr	r2, [sp, #12]
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	42ab      	cmp	r3, r5
 8001b74:	dcf2      	bgt.n	8001b5c <_printf_i+0x1e8>
 8001b76:	e7eb      	b.n	8001b50 <_printf_i+0x1dc>
 8001b78:	2500      	movs	r5, #0
 8001b7a:	f104 0919 	add.w	r9, r4, #25
 8001b7e:	e7f5      	b.n	8001b6c <_printf_i+0x1f8>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1ac      	bne.n	8001ade <_printf_i+0x16a>
 8001b84:	7803      	ldrb	r3, [r0, #0]
 8001b86:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001b8e:	e76c      	b.n	8001a6a <_printf_i+0xf6>
 8001b90:	08002235 	.word	0x08002235
 8001b94:	08002246 	.word	0x08002246

08001b98 <_sbrk_r>:
 8001b98:	b538      	push	{r3, r4, r5, lr}
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	4c05      	ldr	r4, [pc, #20]	; (8001bb4 <_sbrk_r+0x1c>)
 8001b9e:	4605      	mov	r5, r0
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	6023      	str	r3, [r4, #0]
 8001ba4:	f7fe fc84 	bl	80004b0 <_sbrk>
 8001ba8:	1c43      	adds	r3, r0, #1
 8001baa:	d102      	bne.n	8001bb2 <_sbrk_r+0x1a>
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	b103      	cbz	r3, 8001bb2 <_sbrk_r+0x1a>
 8001bb0:	602b      	str	r3, [r5, #0]
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
 8001bb4:	200000a0 	.word	0x200000a0

08001bb8 <__sread>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	460c      	mov	r4, r1
 8001bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bc0:	f000 faa2 	bl	8002108 <_read_r>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	bfab      	itete	ge
 8001bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bca:	89a3      	ldrhlt	r3, [r4, #12]
 8001bcc:	181b      	addge	r3, r3, r0
 8001bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bd2:	bfac      	ite	ge
 8001bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bd6:	81a3      	strhlt	r3, [r4, #12]
 8001bd8:	bd10      	pop	{r4, pc}

08001bda <__swrite>:
 8001bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bde:	461f      	mov	r7, r3
 8001be0:	898b      	ldrh	r3, [r1, #12]
 8001be2:	4605      	mov	r5, r0
 8001be4:	05db      	lsls	r3, r3, #23
 8001be6:	460c      	mov	r4, r1
 8001be8:	4616      	mov	r6, r2
 8001bea:	d505      	bpl.n	8001bf8 <__swrite+0x1e>
 8001bec:	2302      	movs	r3, #2
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bf4:	f000 f9b6 	bl	8001f64 <_lseek_r>
 8001bf8:	89a3      	ldrh	r3, [r4, #12]
 8001bfa:	4632      	mov	r2, r6
 8001bfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c00:	81a3      	strh	r3, [r4, #12]
 8001c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c06:	463b      	mov	r3, r7
 8001c08:	4628      	mov	r0, r5
 8001c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0e:	f000 b869 	b.w	8001ce4 <_write_r>

08001c12 <__sseek>:
 8001c12:	b510      	push	{r4, lr}
 8001c14:	460c      	mov	r4, r1
 8001c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c1a:	f000 f9a3 	bl	8001f64 <_lseek_r>
 8001c1e:	1c43      	adds	r3, r0, #1
 8001c20:	89a3      	ldrh	r3, [r4, #12]
 8001c22:	bf15      	itete	ne
 8001c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c2e:	81a3      	strheq	r3, [r4, #12]
 8001c30:	bf18      	it	ne
 8001c32:	81a3      	strhne	r3, [r4, #12]
 8001c34:	bd10      	pop	{r4, pc}

08001c36 <__sclose>:
 8001c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c3a:	f000 b8d3 	b.w	8001de4 <_close_r>
	...

08001c40 <__swbuf_r>:
 8001c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c42:	460e      	mov	r6, r1
 8001c44:	4614      	mov	r4, r2
 8001c46:	4605      	mov	r5, r0
 8001c48:	b118      	cbz	r0, 8001c52 <__swbuf_r+0x12>
 8001c4a:	6983      	ldr	r3, [r0, #24]
 8001c4c:	b90b      	cbnz	r3, 8001c52 <__swbuf_r+0x12>
 8001c4e:	f7ff fbf9 	bl	8001444 <__sinit>
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <__swbuf_r+0x98>)
 8001c54:	429c      	cmp	r4, r3
 8001c56:	d12a      	bne.n	8001cae <__swbuf_r+0x6e>
 8001c58:	686c      	ldr	r4, [r5, #4]
 8001c5a:	69a3      	ldr	r3, [r4, #24]
 8001c5c:	60a3      	str	r3, [r4, #8]
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	071a      	lsls	r2, r3, #28
 8001c62:	d52e      	bpl.n	8001cc2 <__swbuf_r+0x82>
 8001c64:	6923      	ldr	r3, [r4, #16]
 8001c66:	b363      	cbz	r3, 8001cc2 <__swbuf_r+0x82>
 8001c68:	6923      	ldr	r3, [r4, #16]
 8001c6a:	6820      	ldr	r0, [r4, #0]
 8001c6c:	b2f6      	uxtb	r6, r6
 8001c6e:	1ac0      	subs	r0, r0, r3
 8001c70:	6963      	ldr	r3, [r4, #20]
 8001c72:	4637      	mov	r7, r6
 8001c74:	4283      	cmp	r3, r0
 8001c76:	dc04      	bgt.n	8001c82 <__swbuf_r+0x42>
 8001c78:	4621      	mov	r1, r4
 8001c7a:	4628      	mov	r0, r5
 8001c7c:	f000 f948 	bl	8001f10 <_fflush_r>
 8001c80:	bb28      	cbnz	r0, 8001cce <__swbuf_r+0x8e>
 8001c82:	68a3      	ldr	r3, [r4, #8]
 8001c84:	3001      	adds	r0, #1
 8001c86:	3b01      	subs	r3, #1
 8001c88:	60a3      	str	r3, [r4, #8]
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	6022      	str	r2, [r4, #0]
 8001c90:	701e      	strb	r6, [r3, #0]
 8001c92:	6963      	ldr	r3, [r4, #20]
 8001c94:	4283      	cmp	r3, r0
 8001c96:	d004      	beq.n	8001ca2 <__swbuf_r+0x62>
 8001c98:	89a3      	ldrh	r3, [r4, #12]
 8001c9a:	07db      	lsls	r3, r3, #31
 8001c9c:	d519      	bpl.n	8001cd2 <__swbuf_r+0x92>
 8001c9e:	2e0a      	cmp	r6, #10
 8001ca0:	d117      	bne.n	8001cd2 <__swbuf_r+0x92>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	f000 f933 	bl	8001f10 <_fflush_r>
 8001caa:	b190      	cbz	r0, 8001cd2 <__swbuf_r+0x92>
 8001cac:	e00f      	b.n	8001cce <__swbuf_r+0x8e>
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <__swbuf_r+0x9c>)
 8001cb0:	429c      	cmp	r4, r3
 8001cb2:	d101      	bne.n	8001cb8 <__swbuf_r+0x78>
 8001cb4:	68ac      	ldr	r4, [r5, #8]
 8001cb6:	e7d0      	b.n	8001c5a <__swbuf_r+0x1a>
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <__swbuf_r+0xa0>)
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	bf08      	it	eq
 8001cbe:	68ec      	ldreq	r4, [r5, #12]
 8001cc0:	e7cb      	b.n	8001c5a <__swbuf_r+0x1a>
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f000 f81f 	bl	8001d08 <__swsetup_r>
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d0cc      	beq.n	8001c68 <__swbuf_r+0x28>
 8001cce:	f04f 37ff 	mov.w	r7, #4294967295
 8001cd2:	4638      	mov	r0, r7
 8001cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	080021e4 	.word	0x080021e4
 8001cdc:	08002204 	.word	0x08002204
 8001ce0:	080021c4 	.word	0x080021c4

08001ce4 <_write_r>:
 8001ce4:	b538      	push	{r3, r4, r5, lr}
 8001ce6:	4605      	mov	r5, r0
 8001ce8:	4608      	mov	r0, r1
 8001cea:	4611      	mov	r1, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	4c05      	ldr	r4, [pc, #20]	; (8001d04 <_write_r+0x20>)
 8001cf0:	6022      	str	r2, [r4, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f7fe fa50 	bl	8000198 <_write>
 8001cf8:	1c43      	adds	r3, r0, #1
 8001cfa:	d102      	bne.n	8001d02 <_write_r+0x1e>
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	b103      	cbz	r3, 8001d02 <_write_r+0x1e>
 8001d00:	602b      	str	r3, [r5, #0]
 8001d02:	bd38      	pop	{r3, r4, r5, pc}
 8001d04:	200000a0 	.word	0x200000a0

08001d08 <__swsetup_r>:
 8001d08:	4b32      	ldr	r3, [pc, #200]	; (8001dd4 <__swsetup_r+0xcc>)
 8001d0a:	b570      	push	{r4, r5, r6, lr}
 8001d0c:	681d      	ldr	r5, [r3, #0]
 8001d0e:	4606      	mov	r6, r0
 8001d10:	460c      	mov	r4, r1
 8001d12:	b125      	cbz	r5, 8001d1e <__swsetup_r+0x16>
 8001d14:	69ab      	ldr	r3, [r5, #24]
 8001d16:	b913      	cbnz	r3, 8001d1e <__swsetup_r+0x16>
 8001d18:	4628      	mov	r0, r5
 8001d1a:	f7ff fb93 	bl	8001444 <__sinit>
 8001d1e:	4b2e      	ldr	r3, [pc, #184]	; (8001dd8 <__swsetup_r+0xd0>)
 8001d20:	429c      	cmp	r4, r3
 8001d22:	d10f      	bne.n	8001d44 <__swsetup_r+0x3c>
 8001d24:	686c      	ldr	r4, [r5, #4]
 8001d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	0715      	lsls	r5, r2, #28
 8001d2e:	d42c      	bmi.n	8001d8a <__swsetup_r+0x82>
 8001d30:	06d0      	lsls	r0, r2, #27
 8001d32:	d411      	bmi.n	8001d58 <__swsetup_r+0x50>
 8001d34:	2209      	movs	r2, #9
 8001d36:	6032      	str	r2, [r6, #0]
 8001d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d3c:	81a3      	strh	r3, [r4, #12]
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d42:	e03e      	b.n	8001dc2 <__swsetup_r+0xba>
 8001d44:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <__swsetup_r+0xd4>)
 8001d46:	429c      	cmp	r4, r3
 8001d48:	d101      	bne.n	8001d4e <__swsetup_r+0x46>
 8001d4a:	68ac      	ldr	r4, [r5, #8]
 8001d4c:	e7eb      	b.n	8001d26 <__swsetup_r+0x1e>
 8001d4e:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <__swsetup_r+0xd8>)
 8001d50:	429c      	cmp	r4, r3
 8001d52:	bf08      	it	eq
 8001d54:	68ec      	ldreq	r4, [r5, #12]
 8001d56:	e7e6      	b.n	8001d26 <__swsetup_r+0x1e>
 8001d58:	0751      	lsls	r1, r2, #29
 8001d5a:	d512      	bpl.n	8001d82 <__swsetup_r+0x7a>
 8001d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d5e:	b141      	cbz	r1, 8001d72 <__swsetup_r+0x6a>
 8001d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d64:	4299      	cmp	r1, r3
 8001d66:	d002      	beq.n	8001d6e <__swsetup_r+0x66>
 8001d68:	4630      	mov	r0, r6
 8001d6a:	f000 f981 	bl	8002070 <_free_r>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	6363      	str	r3, [r4, #52]	; 0x34
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d78:	81a3      	strh	r3, [r4, #12]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	6063      	str	r3, [r4, #4]
 8001d7e:	6923      	ldr	r3, [r4, #16]
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	89a3      	ldrh	r3, [r4, #12]
 8001d84:	f043 0308 	orr.w	r3, r3, #8
 8001d88:	81a3      	strh	r3, [r4, #12]
 8001d8a:	6923      	ldr	r3, [r4, #16]
 8001d8c:	b94b      	cbnz	r3, 8001da2 <__swsetup_r+0x9a>
 8001d8e:	89a3      	ldrh	r3, [r4, #12]
 8001d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d98:	d003      	beq.n	8001da2 <__swsetup_r+0x9a>
 8001d9a:	4621      	mov	r1, r4
 8001d9c:	4630      	mov	r0, r6
 8001d9e:	f000 f917 	bl	8001fd0 <__smakebuf_r>
 8001da2:	89a2      	ldrh	r2, [r4, #12]
 8001da4:	f012 0301 	ands.w	r3, r2, #1
 8001da8:	d00c      	beq.n	8001dc4 <__swsetup_r+0xbc>
 8001daa:	2300      	movs	r3, #0
 8001dac:	60a3      	str	r3, [r4, #8]
 8001dae:	6963      	ldr	r3, [r4, #20]
 8001db0:	425b      	negs	r3, r3
 8001db2:	61a3      	str	r3, [r4, #24]
 8001db4:	6923      	ldr	r3, [r4, #16]
 8001db6:	b953      	cbnz	r3, 8001dce <__swsetup_r+0xc6>
 8001db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001dbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001dc0:	d1ba      	bne.n	8001d38 <__swsetup_r+0x30>
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}
 8001dc4:	0792      	lsls	r2, r2, #30
 8001dc6:	bf58      	it	pl
 8001dc8:	6963      	ldrpl	r3, [r4, #20]
 8001dca:	60a3      	str	r3, [r4, #8]
 8001dcc:	e7f2      	b.n	8001db4 <__swsetup_r+0xac>
 8001dce:	2000      	movs	r0, #0
 8001dd0:	e7f7      	b.n	8001dc2 <__swsetup_r+0xba>
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c
 8001dd8:	080021e4 	.word	0x080021e4
 8001ddc:	08002204 	.word	0x08002204
 8001de0:	080021c4 	.word	0x080021c4

08001de4 <_close_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	2300      	movs	r3, #0
 8001de8:	4c05      	ldr	r4, [pc, #20]	; (8001e00 <_close_r+0x1c>)
 8001dea:	4605      	mov	r5, r0
 8001dec:	4608      	mov	r0, r1
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	f7fe fb2d 	bl	800044e <_close>
 8001df4:	1c43      	adds	r3, r0, #1
 8001df6:	d102      	bne.n	8001dfe <_close_r+0x1a>
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	b103      	cbz	r3, 8001dfe <_close_r+0x1a>
 8001dfc:	602b      	str	r3, [r5, #0]
 8001dfe:	bd38      	pop	{r3, r4, r5, pc}
 8001e00:	200000a0 	.word	0x200000a0

08001e04 <__sflush_r>:
 8001e04:	898a      	ldrh	r2, [r1, #12]
 8001e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0a:	4605      	mov	r5, r0
 8001e0c:	0710      	lsls	r0, r2, #28
 8001e0e:	460c      	mov	r4, r1
 8001e10:	d458      	bmi.n	8001ec4 <__sflush_r+0xc0>
 8001e12:	684b      	ldr	r3, [r1, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	dc05      	bgt.n	8001e24 <__sflush_r+0x20>
 8001e18:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dc02      	bgt.n	8001e24 <__sflush_r+0x20>
 8001e1e:	2000      	movs	r0, #0
 8001e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e26:	2e00      	cmp	r6, #0
 8001e28:	d0f9      	beq.n	8001e1e <__sflush_r+0x1a>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e30:	682f      	ldr	r7, [r5, #0]
 8001e32:	6a21      	ldr	r1, [r4, #32]
 8001e34:	602b      	str	r3, [r5, #0]
 8001e36:	d032      	beq.n	8001e9e <__sflush_r+0x9a>
 8001e38:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e3a:	89a3      	ldrh	r3, [r4, #12]
 8001e3c:	075a      	lsls	r2, r3, #29
 8001e3e:	d505      	bpl.n	8001e4c <__sflush_r+0x48>
 8001e40:	6863      	ldr	r3, [r4, #4]
 8001e42:	1ac0      	subs	r0, r0, r3
 8001e44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e46:	b10b      	cbz	r3, 8001e4c <__sflush_r+0x48>
 8001e48:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e4a:	1ac0      	subs	r0, r0, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4602      	mov	r2, r0
 8001e50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e52:	6a21      	ldr	r1, [r4, #32]
 8001e54:	4628      	mov	r0, r5
 8001e56:	47b0      	blx	r6
 8001e58:	1c43      	adds	r3, r0, #1
 8001e5a:	89a3      	ldrh	r3, [r4, #12]
 8001e5c:	d106      	bne.n	8001e6c <__sflush_r+0x68>
 8001e5e:	6829      	ldr	r1, [r5, #0]
 8001e60:	291d      	cmp	r1, #29
 8001e62:	d848      	bhi.n	8001ef6 <__sflush_r+0xf2>
 8001e64:	4a29      	ldr	r2, [pc, #164]	; (8001f0c <__sflush_r+0x108>)
 8001e66:	40ca      	lsrs	r2, r1
 8001e68:	07d6      	lsls	r6, r2, #31
 8001e6a:	d544      	bpl.n	8001ef6 <__sflush_r+0xf2>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6062      	str	r2, [r4, #4]
 8001e70:	6922      	ldr	r2, [r4, #16]
 8001e72:	04d9      	lsls	r1, r3, #19
 8001e74:	6022      	str	r2, [r4, #0]
 8001e76:	d504      	bpl.n	8001e82 <__sflush_r+0x7e>
 8001e78:	1c42      	adds	r2, r0, #1
 8001e7a:	d101      	bne.n	8001e80 <__sflush_r+0x7c>
 8001e7c:	682b      	ldr	r3, [r5, #0]
 8001e7e:	b903      	cbnz	r3, 8001e82 <__sflush_r+0x7e>
 8001e80:	6560      	str	r0, [r4, #84]	; 0x54
 8001e82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e84:	602f      	str	r7, [r5, #0]
 8001e86:	2900      	cmp	r1, #0
 8001e88:	d0c9      	beq.n	8001e1e <__sflush_r+0x1a>
 8001e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e8e:	4299      	cmp	r1, r3
 8001e90:	d002      	beq.n	8001e98 <__sflush_r+0x94>
 8001e92:	4628      	mov	r0, r5
 8001e94:	f000 f8ec 	bl	8002070 <_free_r>
 8001e98:	2000      	movs	r0, #0
 8001e9a:	6360      	str	r0, [r4, #52]	; 0x34
 8001e9c:	e7c0      	b.n	8001e20 <__sflush_r+0x1c>
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	4628      	mov	r0, r5
 8001ea2:	47b0      	blx	r6
 8001ea4:	1c41      	adds	r1, r0, #1
 8001ea6:	d1c8      	bne.n	8001e3a <__sflush_r+0x36>
 8001ea8:	682b      	ldr	r3, [r5, #0]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0c5      	beq.n	8001e3a <__sflush_r+0x36>
 8001eae:	2b1d      	cmp	r3, #29
 8001eb0:	d001      	beq.n	8001eb6 <__sflush_r+0xb2>
 8001eb2:	2b16      	cmp	r3, #22
 8001eb4:	d101      	bne.n	8001eba <__sflush_r+0xb6>
 8001eb6:	602f      	str	r7, [r5, #0]
 8001eb8:	e7b1      	b.n	8001e1e <__sflush_r+0x1a>
 8001eba:	89a3      	ldrh	r3, [r4, #12]
 8001ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec0:	81a3      	strh	r3, [r4, #12]
 8001ec2:	e7ad      	b.n	8001e20 <__sflush_r+0x1c>
 8001ec4:	690f      	ldr	r7, [r1, #16]
 8001ec6:	2f00      	cmp	r7, #0
 8001ec8:	d0a9      	beq.n	8001e1e <__sflush_r+0x1a>
 8001eca:	0793      	lsls	r3, r2, #30
 8001ecc:	bf18      	it	ne
 8001ece:	2300      	movne	r3, #0
 8001ed0:	680e      	ldr	r6, [r1, #0]
 8001ed2:	bf08      	it	eq
 8001ed4:	694b      	ldreq	r3, [r1, #20]
 8001ed6:	eba6 0807 	sub.w	r8, r6, r7
 8001eda:	600f      	str	r7, [r1, #0]
 8001edc:	608b      	str	r3, [r1, #8]
 8001ede:	f1b8 0f00 	cmp.w	r8, #0
 8001ee2:	dd9c      	ble.n	8001e1e <__sflush_r+0x1a>
 8001ee4:	4643      	mov	r3, r8
 8001ee6:	463a      	mov	r2, r7
 8001ee8:	6a21      	ldr	r1, [r4, #32]
 8001eea:	4628      	mov	r0, r5
 8001eec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001eee:	47b0      	blx	r6
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	dc06      	bgt.n	8001f02 <__sflush_r+0xfe>
 8001ef4:	89a3      	ldrh	r3, [r4, #12]
 8001ef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001efa:	81a3      	strh	r3, [r4, #12]
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	e78e      	b.n	8001e20 <__sflush_r+0x1c>
 8001f02:	4407      	add	r7, r0
 8001f04:	eba8 0800 	sub.w	r8, r8, r0
 8001f08:	e7e9      	b.n	8001ede <__sflush_r+0xda>
 8001f0a:	bf00      	nop
 8001f0c:	20400001 	.word	0x20400001

08001f10 <_fflush_r>:
 8001f10:	b538      	push	{r3, r4, r5, lr}
 8001f12:	690b      	ldr	r3, [r1, #16]
 8001f14:	4605      	mov	r5, r0
 8001f16:	460c      	mov	r4, r1
 8001f18:	b1db      	cbz	r3, 8001f52 <_fflush_r+0x42>
 8001f1a:	b118      	cbz	r0, 8001f24 <_fflush_r+0x14>
 8001f1c:	6983      	ldr	r3, [r0, #24]
 8001f1e:	b90b      	cbnz	r3, 8001f24 <_fflush_r+0x14>
 8001f20:	f7ff fa90 	bl	8001444 <__sinit>
 8001f24:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <_fflush_r+0x48>)
 8001f26:	429c      	cmp	r4, r3
 8001f28:	d109      	bne.n	8001f3e <_fflush_r+0x2e>
 8001f2a:	686c      	ldr	r4, [r5, #4]
 8001f2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f30:	b17b      	cbz	r3, 8001f52 <_fflush_r+0x42>
 8001f32:	4621      	mov	r1, r4
 8001f34:	4628      	mov	r0, r5
 8001f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f3a:	f7ff bf63 	b.w	8001e04 <__sflush_r>
 8001f3e:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <_fflush_r+0x4c>)
 8001f40:	429c      	cmp	r4, r3
 8001f42:	d101      	bne.n	8001f48 <_fflush_r+0x38>
 8001f44:	68ac      	ldr	r4, [r5, #8]
 8001f46:	e7f1      	b.n	8001f2c <_fflush_r+0x1c>
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <_fflush_r+0x50>)
 8001f4a:	429c      	cmp	r4, r3
 8001f4c:	bf08      	it	eq
 8001f4e:	68ec      	ldreq	r4, [r5, #12]
 8001f50:	e7ec      	b.n	8001f2c <_fflush_r+0x1c>
 8001f52:	2000      	movs	r0, #0
 8001f54:	bd38      	pop	{r3, r4, r5, pc}
 8001f56:	bf00      	nop
 8001f58:	080021e4 	.word	0x080021e4
 8001f5c:	08002204 	.word	0x08002204
 8001f60:	080021c4 	.word	0x080021c4

08001f64 <_lseek_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4605      	mov	r5, r0
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	4c05      	ldr	r4, [pc, #20]	; (8001f84 <_lseek_r+0x20>)
 8001f70:	6022      	str	r2, [r4, #0]
 8001f72:	461a      	mov	r2, r3
 8001f74:	f7fe fa8f 	bl	8000496 <_lseek>
 8001f78:	1c43      	adds	r3, r0, #1
 8001f7a:	d102      	bne.n	8001f82 <_lseek_r+0x1e>
 8001f7c:	6823      	ldr	r3, [r4, #0]
 8001f7e:	b103      	cbz	r3, 8001f82 <_lseek_r+0x1e>
 8001f80:	602b      	str	r3, [r5, #0]
 8001f82:	bd38      	pop	{r3, r4, r5, pc}
 8001f84:	200000a0 	.word	0x200000a0

08001f88 <__swhatbuf_r>:
 8001f88:	b570      	push	{r4, r5, r6, lr}
 8001f8a:	460e      	mov	r6, r1
 8001f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f90:	b096      	sub	sp, #88	; 0x58
 8001f92:	2900      	cmp	r1, #0
 8001f94:	4614      	mov	r4, r2
 8001f96:	461d      	mov	r5, r3
 8001f98:	da07      	bge.n	8001faa <__swhatbuf_r+0x22>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	602b      	str	r3, [r5, #0]
 8001f9e:	89b3      	ldrh	r3, [r6, #12]
 8001fa0:	061a      	lsls	r2, r3, #24
 8001fa2:	d410      	bmi.n	8001fc6 <__swhatbuf_r+0x3e>
 8001fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fa8:	e00e      	b.n	8001fc8 <__swhatbuf_r+0x40>
 8001faa:	466a      	mov	r2, sp
 8001fac:	f000 f8be 	bl	800212c <_fstat_r>
 8001fb0:	2800      	cmp	r0, #0
 8001fb2:	dbf2      	blt.n	8001f9a <__swhatbuf_r+0x12>
 8001fb4:	9a01      	ldr	r2, [sp, #4]
 8001fb6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001fba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001fbe:	425a      	negs	r2, r3
 8001fc0:	415a      	adcs	r2, r3
 8001fc2:	602a      	str	r2, [r5, #0]
 8001fc4:	e7ee      	b.n	8001fa4 <__swhatbuf_r+0x1c>
 8001fc6:	2340      	movs	r3, #64	; 0x40
 8001fc8:	2000      	movs	r0, #0
 8001fca:	6023      	str	r3, [r4, #0]
 8001fcc:	b016      	add	sp, #88	; 0x58
 8001fce:	bd70      	pop	{r4, r5, r6, pc}

08001fd0 <__smakebuf_r>:
 8001fd0:	898b      	ldrh	r3, [r1, #12]
 8001fd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fd4:	079d      	lsls	r5, r3, #30
 8001fd6:	4606      	mov	r6, r0
 8001fd8:	460c      	mov	r4, r1
 8001fda:	d507      	bpl.n	8001fec <__smakebuf_r+0x1c>
 8001fdc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001fe0:	6023      	str	r3, [r4, #0]
 8001fe2:	6123      	str	r3, [r4, #16]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	6163      	str	r3, [r4, #20]
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	ab01      	add	r3, sp, #4
 8001fee:	466a      	mov	r2, sp
 8001ff0:	f7ff ffca 	bl	8001f88 <__swhatbuf_r>
 8001ff4:	9900      	ldr	r1, [sp, #0]
 8001ff6:	4605      	mov	r5, r0
 8001ff8:	4630      	mov	r0, r6
 8001ffa:	f7ff faad 	bl	8001558 <_malloc_r>
 8001ffe:	b948      	cbnz	r0, 8002014 <__smakebuf_r+0x44>
 8002000:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002004:	059a      	lsls	r2, r3, #22
 8002006:	d4ef      	bmi.n	8001fe8 <__smakebuf_r+0x18>
 8002008:	f023 0303 	bic.w	r3, r3, #3
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	81a3      	strh	r3, [r4, #12]
 8002012:	e7e3      	b.n	8001fdc <__smakebuf_r+0xc>
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <__smakebuf_r+0x7c>)
 8002016:	62b3      	str	r3, [r6, #40]	; 0x28
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	6020      	str	r0, [r4, #0]
 800201c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002020:	81a3      	strh	r3, [r4, #12]
 8002022:	9b00      	ldr	r3, [sp, #0]
 8002024:	6120      	str	r0, [r4, #16]
 8002026:	6163      	str	r3, [r4, #20]
 8002028:	9b01      	ldr	r3, [sp, #4]
 800202a:	b15b      	cbz	r3, 8002044 <__smakebuf_r+0x74>
 800202c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002030:	4630      	mov	r0, r6
 8002032:	f000 f88d 	bl	8002150 <_isatty_r>
 8002036:	b128      	cbz	r0, 8002044 <__smakebuf_r+0x74>
 8002038:	89a3      	ldrh	r3, [r4, #12]
 800203a:	f023 0303 	bic.w	r3, r3, #3
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	81a3      	strh	r3, [r4, #12]
 8002044:	89a3      	ldrh	r3, [r4, #12]
 8002046:	431d      	orrs	r5, r3
 8002048:	81a5      	strh	r5, [r4, #12]
 800204a:	e7cd      	b.n	8001fe8 <__smakebuf_r+0x18>
 800204c:	0800140d 	.word	0x0800140d

08002050 <memchr>:
 8002050:	b510      	push	{r4, lr}
 8002052:	b2c9      	uxtb	r1, r1
 8002054:	4402      	add	r2, r0
 8002056:	4290      	cmp	r0, r2
 8002058:	4603      	mov	r3, r0
 800205a:	d101      	bne.n	8002060 <memchr+0x10>
 800205c:	2300      	movs	r3, #0
 800205e:	e003      	b.n	8002068 <memchr+0x18>
 8002060:	781c      	ldrb	r4, [r3, #0]
 8002062:	3001      	adds	r0, #1
 8002064:	428c      	cmp	r4, r1
 8002066:	d1f6      	bne.n	8002056 <memchr+0x6>
 8002068:	4618      	mov	r0, r3
 800206a:	bd10      	pop	{r4, pc}

0800206c <__malloc_lock>:
 800206c:	4770      	bx	lr

0800206e <__malloc_unlock>:
 800206e:	4770      	bx	lr

08002070 <_free_r>:
 8002070:	b538      	push	{r3, r4, r5, lr}
 8002072:	4605      	mov	r5, r0
 8002074:	2900      	cmp	r1, #0
 8002076:	d043      	beq.n	8002100 <_free_r+0x90>
 8002078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800207c:	1f0c      	subs	r4, r1, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	bfb8      	it	lt
 8002082:	18e4      	addlt	r4, r4, r3
 8002084:	f7ff fff2 	bl	800206c <__malloc_lock>
 8002088:	4a1e      	ldr	r2, [pc, #120]	; (8002104 <_free_r+0x94>)
 800208a:	6813      	ldr	r3, [r2, #0]
 800208c:	4610      	mov	r0, r2
 800208e:	b933      	cbnz	r3, 800209e <_free_r+0x2e>
 8002090:	6063      	str	r3, [r4, #4]
 8002092:	6014      	str	r4, [r2, #0]
 8002094:	4628      	mov	r0, r5
 8002096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800209a:	f7ff bfe8 	b.w	800206e <__malloc_unlock>
 800209e:	42a3      	cmp	r3, r4
 80020a0:	d90b      	bls.n	80020ba <_free_r+0x4a>
 80020a2:	6821      	ldr	r1, [r4, #0]
 80020a4:	1862      	adds	r2, r4, r1
 80020a6:	4293      	cmp	r3, r2
 80020a8:	bf01      	itttt	eq
 80020aa:	681a      	ldreq	r2, [r3, #0]
 80020ac:	685b      	ldreq	r3, [r3, #4]
 80020ae:	1852      	addeq	r2, r2, r1
 80020b0:	6022      	streq	r2, [r4, #0]
 80020b2:	6063      	str	r3, [r4, #4]
 80020b4:	6004      	str	r4, [r0, #0]
 80020b6:	e7ed      	b.n	8002094 <_free_r+0x24>
 80020b8:	4613      	mov	r3, r2
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	b10a      	cbz	r2, 80020c2 <_free_r+0x52>
 80020be:	42a2      	cmp	r2, r4
 80020c0:	d9fa      	bls.n	80020b8 <_free_r+0x48>
 80020c2:	6819      	ldr	r1, [r3, #0]
 80020c4:	1858      	adds	r0, r3, r1
 80020c6:	42a0      	cmp	r0, r4
 80020c8:	d10b      	bne.n	80020e2 <_free_r+0x72>
 80020ca:	6820      	ldr	r0, [r4, #0]
 80020cc:	4401      	add	r1, r0
 80020ce:	1858      	adds	r0, r3, r1
 80020d0:	4282      	cmp	r2, r0
 80020d2:	6019      	str	r1, [r3, #0]
 80020d4:	d1de      	bne.n	8002094 <_free_r+0x24>
 80020d6:	6810      	ldr	r0, [r2, #0]
 80020d8:	6852      	ldr	r2, [r2, #4]
 80020da:	4401      	add	r1, r0
 80020dc:	6019      	str	r1, [r3, #0]
 80020de:	605a      	str	r2, [r3, #4]
 80020e0:	e7d8      	b.n	8002094 <_free_r+0x24>
 80020e2:	d902      	bls.n	80020ea <_free_r+0x7a>
 80020e4:	230c      	movs	r3, #12
 80020e6:	602b      	str	r3, [r5, #0]
 80020e8:	e7d4      	b.n	8002094 <_free_r+0x24>
 80020ea:	6820      	ldr	r0, [r4, #0]
 80020ec:	1821      	adds	r1, r4, r0
 80020ee:	428a      	cmp	r2, r1
 80020f0:	bf01      	itttt	eq
 80020f2:	6811      	ldreq	r1, [r2, #0]
 80020f4:	6852      	ldreq	r2, [r2, #4]
 80020f6:	1809      	addeq	r1, r1, r0
 80020f8:	6021      	streq	r1, [r4, #0]
 80020fa:	6062      	str	r2, [r4, #4]
 80020fc:	605c      	str	r4, [r3, #4]
 80020fe:	e7c9      	b.n	8002094 <_free_r+0x24>
 8002100:	bd38      	pop	{r3, r4, r5, pc}
 8002102:	bf00      	nop
 8002104:	20000090 	.word	0x20000090

08002108 <_read_r>:
 8002108:	b538      	push	{r3, r4, r5, lr}
 800210a:	4605      	mov	r5, r0
 800210c:	4608      	mov	r0, r1
 800210e:	4611      	mov	r1, r2
 8002110:	2200      	movs	r2, #0
 8002112:	4c05      	ldr	r4, [pc, #20]	; (8002128 <_read_r+0x20>)
 8002114:	6022      	str	r2, [r4, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	f7fe f97c 	bl	8000414 <_read>
 800211c:	1c43      	adds	r3, r0, #1
 800211e:	d102      	bne.n	8002126 <_read_r+0x1e>
 8002120:	6823      	ldr	r3, [r4, #0]
 8002122:	b103      	cbz	r3, 8002126 <_read_r+0x1e>
 8002124:	602b      	str	r3, [r5, #0]
 8002126:	bd38      	pop	{r3, r4, r5, pc}
 8002128:	200000a0 	.word	0x200000a0

0800212c <_fstat_r>:
 800212c:	b538      	push	{r3, r4, r5, lr}
 800212e:	2300      	movs	r3, #0
 8002130:	4c06      	ldr	r4, [pc, #24]	; (800214c <_fstat_r+0x20>)
 8002132:	4605      	mov	r5, r0
 8002134:	4608      	mov	r0, r1
 8002136:	4611      	mov	r1, r2
 8002138:	6023      	str	r3, [r4, #0]
 800213a:	f7fe f993 	bl	8000464 <_fstat>
 800213e:	1c43      	adds	r3, r0, #1
 8002140:	d102      	bne.n	8002148 <_fstat_r+0x1c>
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	b103      	cbz	r3, 8002148 <_fstat_r+0x1c>
 8002146:	602b      	str	r3, [r5, #0]
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	bf00      	nop
 800214c:	200000a0 	.word	0x200000a0

08002150 <_isatty_r>:
 8002150:	b538      	push	{r3, r4, r5, lr}
 8002152:	2300      	movs	r3, #0
 8002154:	4c05      	ldr	r4, [pc, #20]	; (800216c <_isatty_r+0x1c>)
 8002156:	4605      	mov	r5, r0
 8002158:	4608      	mov	r0, r1
 800215a:	6023      	str	r3, [r4, #0]
 800215c:	f7fe f991 	bl	8000482 <_isatty>
 8002160:	1c43      	adds	r3, r0, #1
 8002162:	d102      	bne.n	800216a <_isatty_r+0x1a>
 8002164:	6823      	ldr	r3, [r4, #0]
 8002166:	b103      	cbz	r3, 800216a <_isatty_r+0x1a>
 8002168:	602b      	str	r3, [r5, #0]
 800216a:	bd38      	pop	{r3, r4, r5, pc}
 800216c:	200000a0 	.word	0x200000a0

08002170 <_init>:
 8002170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002172:	bf00      	nop
 8002174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002176:	bc08      	pop	{r3}
 8002178:	469e      	mov	lr, r3
 800217a:	4770      	bx	lr

0800217c <_fini>:
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	bf00      	nop
 8002180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002182:	bc08      	pop	{r3}
 8002184:	469e      	mov	lr, r3
 8002186:	4770      	bx	lr
